[
    {
        "question": "Cos'è l'ereditarietà in programmazione a oggetti?",
        "options": [
            "Una tecnica per copiare classi esistenti",
            "Una relazione tra classi che permette di riutilizzare codice",
            "Un modo per dichiarare variabili",
            "Una modalità per scrivere codice non ripetitivo"
        ],
        "correctAnswer": 1,
        "explanation": "L'ereditarietà è un concetto di riutilizzo del codice e modellazione."
    },
    {
        "question": "Cos'è l'incapsulamento?",
        "options": [
            "Nascondere lo stato interno di un oggetto",
            "Un tipo speciale di classe",
            "Una tecnica per creare istanze multiple",
            "Un tipo di variabile"
        ],
        "correctAnswer": 0,
        "explanation": "L'incapsulamento è il meccanismo di nascondere i dettagli di implementazione."
    },
    {
        "question": "Qual è il concetto di polimorfismo?",
        "options": [
            "Un tipo di variabile",
            "La capacità di un oggetto di assumere molteplici forme",
            "Un meccanismo per gestire gli errori",
            "Una tecnica per creare oggetti"
        ],
        "correctAnswer": 1,
        "explanation": "Il polimorfismo consente di trattare oggetti di diversi tipi in modo uniforme."
    },
    {
        "question": "Cos'è un costruttore in una classe?",
        "options": [
            "Un metodo per creare nuove variabili",
            "Un metodo speciale per inizializzare un oggetto",
            "Una funzione per rimuovere attributi da un oggetto",
            "Un tipo speciale di proprietà"
        ],
        "correctAnswer": 1,
        "explanation": "Il costruttore è un metodo speciale usato per inizializzare un nuovo oggetto."
    },
    {
        "question": "Cos'è un metodo statico?",
        "options": [
            "Un metodo che appartiene alla classe anziché a un'istanza",
            "Un metodo che viene eseguito automaticamente",
            "Un metodo che non può essere ereditato",
            "Un metodo che viene chiamato solo una volta"
        ],
        "correctAnswer": 0,
        "explanation": "I metodi statici appartengono alla classe e possono essere chiamati senza creare un'istanza."
    },
    {
        "question": "Qual è lo scopo di un'interfaccia?",
        "options": [
            "Definire un tipo di dato concreto",
            "Definire un insieme di metodi senza implementazione",
            "Definire un costruttore per una classe",
            "Permettere la gestione degli errori"
        ],
        "correctAnswer": 1,
        "explanation": "Un'interfaccia definisce un contratto per le classi che la implementano."
    },
    {
        "question": "Cos'è un override di metodo?",
        "options": [
            "Creare un metodo con lo stesso nome in una sottoclasse per cambiarne il comportamento",
            "Copiare un metodo da una classe all'altra",
            "Nascondere un metodo esistente in una classe",
            "Eliminare un metodo dalla classe base"
        ],
        "correctAnswer": 0,
        "explanation": "L'override consente di ridefinire un metodo della classe base in una classe derivata."
    },
    {
        "question": "Cos'è un attributo in una classe?",
        "options": [
            "Un metodo speciale",
            "Una proprietà o variabile che appartiene alla classe o all'istanza",
            "Una funzione per eseguire operazioni",
            "Un tipo di classe"
        ],
        "correctAnswer": 1,
        "explanation": "Gli attributi sono proprietà di una classe che rappresentano lo stato o le caratteristiche di un oggetto."
    },
    {
        "question": "Qual è lo scopo del modificatore di accesso 'public'?",
        "options": [
            "Rendere accessibile un membro solo all'interno della classe",
            "Rendere accessibile un membro da qualsiasi parte del programma",
            "Limitare l'accesso agli oggetti derivati",
            "Rendere il membro modificabile solo una volta"
        ],
        "correctAnswer": 1,
        "explanation": "Il modificatore 'public' rende un membro accessibile da qualsiasi parte del programma."
    },
    {
        "question": "Cosa rappresenta il termine 'classe' in programmazione a oggetti?",
        "options": [
            "Un tipo di funzione speciale",
            "Un tipo di variabile",
            "Un modello per creare oggetti",
            "Un tipo di ciclo"
        ],
        "correctAnswer": 2,
        "explanation": "Una classe è un modello o schema per creare oggetti con attributi e metodi."
    },
    {
        "question": "Cosa significa il termine 'oggetto' in programmazione a oggetti?",
        "options": [
            "Una variabile temporanea",
            "Un'istanza di una classe",
            "Una funzione che non ritorna valori",
            "Un errore di programmazione"
        ],
        "correctAnswer": 1,
        "explanation": "Un oggetto è un'istanza di una classe e rappresenta un'entità con proprietà e comportamento."
    },
    {
        "question": "Qual è la differenza tra 'classe' e 'oggetto'?",
        "options": [
            "Una classe è un tipo di variabile, mentre un oggetto è un tipo di funzione",
            "Una classe è un'istanza di un oggetto",
            "Una classe è un modello, mentre un oggetto è un'istanza di quel modello",
            "Non c'è differenza tra classe e oggetto"
        ],
        "correctAnswer": 2,
        "explanation": "Una classe è un modello per creare oggetti, mentre un oggetto è un'istanza della classe."
    },
    {
        "question": "Cosa significa 'abstraction' in programmazione a oggetti?",
        "options": [
            "Nascondere l'implementazione e mostrare solo le funzionalità essenziali",
            "Creare una copia di una classe",
            "Rendere tutte le variabili accessibili",
            "Semplificare il codice senza classi"
        ],
        "correctAnswer": 0,
        "explanation": "L'astrazione è un concetto per nascondere i dettagli complessi e mostrare solo ciò che è rilevante."
    }
]
