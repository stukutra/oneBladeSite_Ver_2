{
    "guides": [
        {
            "title": "Guida Bootstrap",
            "description": "Una guida dettagliata su Bootstrap, il framework CSS pi√π utilizzato per creare siti web responsivi e moderni.",
            "topics": [
                {
                    "topic": "Introduzione a Bootstrap",
                    "description": "<strong>Bootstrap</strong> √® un framework <em>open-source</em> creato da Twitter con l'obiettivo di semplificare lo sviluppo di interfacce utente <strong>responsive</strong> e accessibili a tutti i dispositivi. <h3>Perch√© usare Bootstrap?</h3> <ul> <li><strong>Facilit√† d‚Äôuso:</strong> Include classi CSS pronte all‚Äôuso che semplificano la creazione di layout e componenti grafici.</li> <li><strong>Responsive Design:</strong> Adatta automaticamente i layout ai diversi dispositivi, garantendo un'esperienza utente ottimale su mobile, tablet e desktop.</li> <li><strong>Compatibilit√† Cross-browser:</strong> Supporta tutti i browser moderni.</li> <li><strong>Componenti predefiniti:</strong> Include elementi come navbar, modali, form, card e molti altri.</li> <li><strong>Supporto per JavaScript:</strong> Offre funzionalit√† avanzate senza bisogno di librerie esterne.</li> </ul> <h3>Come Funziona Bootstrap?</h3> <p>Bootstrap si basa su un sistema modulare che comprende una griglia flessibile per layout dinamici e una serie di componenti CSS e JavaScript per elementi interattivi.</p> <h3>Conclusione</h3> <p>Bootstrap √® uno strumento <strong>essenziale</strong> per qualsiasi sviluppatore che voglia realizzare siti moderni, performanti e <em>responsive</em> senza dover scrivere codice CSS complesso.</p>"
                },
                {
                    "topic": "Struttura base di Bootstrap",
                    "description": "<h3>üìå Introduzione alla Struttura di Bootstrap</h3> <p>Bootstrap si basa su una <strong>struttura modulare</strong> e un sistema a <strong>griglia flessibile</strong> che permette agli sviluppatori di creare layout reattivi in modo semplice e veloce. Grazie a una combinazione di <em>HTML, CSS e JavaScript</em>, Bootstrap fornisce una serie di classi predefinite che facilitano l'organizzazione del contenuto su qualsiasi tipo di schermo, dal <strong>mobile</strong> al <strong>desktop</strong>.</p> <h3>üèóÔ∏è La Griglia di Bootstrap: Il Cuore del Layout</h3> <p>Bootstrap utilizza un sistema di griglia basato su <strong>12 colonne</strong>, che consente di organizzare gli elementi in modo dinamico. Il sistema √® altamente flessibile e permette di combinare colonne per ottenere layout complessi e completamente reattivi.</p> <h4>üîπ Struttura di base della griglia</h4> <p>Per creare una griglia in Bootstrap, si utilizza la classe <code>.container</code>, all'interno della quale vengono definite le righe (<code>.row</code>) e le colonne (<code>.col</code>):</p> <pre><code>&lt;div class='container'&gt; &lt;div class='row'&gt; &lt;div class='col-md-6 bg-primary text-white'&gt;Colonna 1&lt;/div&gt; &lt;div class='col-md-6 bg-secondary text-white'&gt;Colonna 2&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>üîπ Il codice sopra crea una riga con <strong>due colonne uguali</strong>, ciascuna che occupa met√† dello schermo sui dispositivi di medie dimensioni (<code>.col-md-6</code>).</p> <h3>üìê Contenitori: Fixed e Fluid</h3> <p>Bootstrap offre due tipi di contenitori per controllare la larghezza del layout:</p> <ul> <li><strong><code>.container</code></strong>: Ha una larghezza fissa e si adatta automaticamente a diverse dimensioni dello schermo.</li> <li><strong><code>.container-fluid</code></strong>: Occupa sempre il <strong>100% della larghezza</strong> disponibile.</li> </ul> <h4>üîπ Esempio di utilizzo:</h4> <pre><code>&lt;div class='container-fluid bg-dark text-white p-3'&gt; Questo contenitore si estende su tutta la larghezza dello schermo. &lt;/div&gt;</code></pre> <h3>üñ•Ô∏è Classi di Layout Responsive</h3> <p>Bootstrap utilizza classi di interruzione di schermo (breakpoints) per adattare il layout a diverse risoluzioni:</p> <table border='1'> <tr> <th>Classe</th> <th>Breakpoint</th> </tr> <tr> <td><code>.col-</code></td> <td>&gt;= 0px (Tutti i dispositivi)</td> </tr> <tr> <td><code>.col-sm-</code></td> <td>&gt;= 576px (Smartphone)</td> </tr> <tr> <td><code>.col-md-</code></td> <td>&gt;= 768px (Tablet)</td> </tr> <tr> <td><code>.col-lg-</code></td> <td>&gt;= 992px (Laptop)</td> </tr> <tr> <td><code>.col-xl-</code></td> <td>&gt;= 1200px (Schermi grandi)</td> </tr> </table> <p>Queste classi consentono di creare colonne che si ridimensionano automaticamente in base alla dimensione dello schermo.</p> <h3>üé® Personalizzazione con Spaziature e Margini</h3> <p>Bootstrap offre un sistema di <strong>spaziature predefinite</strong> tramite classi come <code>.p-*</code> per il padding e <code>.m-*</code> per i margini:</p> <ul> <li><code>.p-3</code>: Aggiunge padding interno uniforme.</li> <li><code>.m-2</code>: Aggiunge margini esterni di media grandezza.</li> </ul> <h4>üîπ Esempio:</h4> <pre><code>&lt;div class='bg-info text-white p-3 m-2'&gt; Questo div ha padding e margini personalizzati. &lt;/div&gt;</code></pre> <h3>üöÄ Conclusione</h3> <p>La struttura base di Bootstrap permette di costruire <strong>layout flessibili e reattivi</strong> senza dover scrivere codice CSS complesso. Grazie al sistema a griglia, ai contenitori e alle classi di personalizzazione, Bootstrap √® la scelta ideale per sviluppatori e designer che vogliono creare pagine moderne in modo semplice ed efficiente.</p>"
                },
                {
                    "topic": "Componenti principali",
                    "description": "<h3>üîπ Introduzione ai Componenti di Bootstrap</h3> <p>Uno dei punti di forza di Bootstrap √® la sua vasta collezione di <strong>componenti predefiniti</strong> che permettono di aggiungere rapidamente elementi interattivi e stilisticamente coerenti a un sito web senza dover scrivere codice CSS personalizzato. I componenti di Bootstrap includono <strong>bottoni, navbar, modali, card, form, tooltip</strong> e molto altro, tutti ottimizzati per un'esperienza utente fluida su qualsiasi dispositivo.</p> <h3>üìå Bottoni e Pulsanti di Azione</h3> <p>I bottoni in Bootstrap sono altamente personalizzabili e si creano con la classe <code>.btn</code>. Esistono diverse varianti basate su colori e dimensioni.</p> <h4>üîπ Esempio di Bottoni</h4> <pre><code>&lt;button class='btn btn-primary'&gt;Pulsante Primario&lt;/button&gt; &lt;button class='btn btn-secondary'&gt;Pulsante Secondario&lt;/button&gt; &lt;button class='btn btn-success'&gt;Pulsante Successo&lt;/button&gt;</code></pre> <p>Questi bottoni hanno colori standardizzati e possono essere combinati con classi come <code>.btn-lg</code> e <code>.btn-sm</code> per regolarne la dimensione.</p> <h3>üìå Navbar: Barre di Navigazione</h3> <p>La navbar √® uno degli elementi pi√π utilizzati per strutturare la navigazione di un sito web. Bootstrap offre una soluzione flessibile e facilmente personalizzabile.</p> <h4>üîπ Esempio di Navbar</h4> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#menu'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='menu'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Servizi&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <p>Questa navbar √® <strong>responsiva</strong>: sui dispositivi mobili il menu si compatta e pu√≤ essere espanso con un pulsante.</p> <h3>üìå Card: Contenitori Stilizzati</h3> <p>Le card sono contenitori versatili che permettono di visualizzare informazioni in modo strutturato.</p> <h4>üîπ Esempio di Card</h4> <pre><code>&lt;div class='card' style='width: 18rem;'&gt; &lt;img src='immagine.jpg' class='card-img-top' alt='...'&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Titolo della Card&lt;/h5&gt; &lt;p class='card-text'&gt;Testo di esempio per la card.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Scopri di pi√π&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Le card possono includere immagini, testo e bottoni, rendendole perfette per le anteprime di contenuti o prodotti.</p> <h3>üìå Modali: Finestre di Dialogo Interattive</h3> <p>Un altro componente potente di Bootstrap sono le modali, finestre che si aprono sopra il contenuto della pagina per visualizzare messaggi o form.</p> <h4>üîπ Esempio di Modale</h4> <pre><code>&lt;button type='button' class='btn btn-primary' data-toggle='modal' data-target='#exampleModal'&gt; Apri Modale &lt;/button&gt; &lt;div class='modal fade' id='exampleModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Titolo della Modale&lt;/h5&gt; &lt;button type='button' class='close' data-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Contenuto della Modale. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-dismiss='modal'&gt;Chiudi&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Le modali sono utili per mostrare informazioni senza cambiare pagina, migliorando l'usabilit√†.</p> <h3>üìå Tooltip e Popover</h3> <p>Per migliorare l'interazione utente, Bootstrap include tooltip (suggerimenti al passaggio del mouse) e popover (finestrine informative cliccabili).</p> <h4>üîπ Esempio di Tooltip</h4> <pre><code>&lt;button type='button' class='btn btn-secondary' data-toggle='tooltip' title='Informazione extra'&gt; Passa sopra &lt;/button&gt;</code></pre> <p>I tooltip migliorano l'accessibilit√† e l'esperienza utente fornendo informazioni aggiuntive.</p> <h3>üöÄ Conclusione</h3> <p>I componenti di Bootstrap semplificano la creazione di interfacce utente <strong>moderne, interattive e accessibili</strong> con pochi semplici comandi. Grazie a bottoni, navbar, modali e tooltip, gli sviluppatori possono costruire <strong>applicazioni web funzionali e intuitive</strong> in pochissimo tempo.</p>"
                },
                {
                    "topic": "Personalizzazione di Bootstrap",
                    "description": "<h3>üé® Personalizzazione di Bootstrap</h3> <p>Uno dei punti di forza di Bootstrap √® la sua capacit√† di essere <strong>altamente personalizzabile</strong>, permettendo agli sviluppatori di adattare il framework alle proprie esigenze senza perdere i vantaggi delle classi predefinite. Ci sono diversi modi per personalizzare Bootstrap, tra cui <strong>override di classi CSS</strong>, <strong>uso di variabili SCSS</strong>, e <strong>Bootstrap Themes</strong>.</p> <h3>üìå Override di Stili CSS</h3> <p>Il metodo pi√π semplice per personalizzare Bootstrap √® sovrascrivere le classi CSS direttamente nel proprio foglio di stile. Per esempio, se si vuole cambiare il colore di tutti i bottoni primari, √® sufficiente scrivere:</p> <pre><code>.btn-primary { background-color: #ff5733; border-color: #ff5733; }</code></pre> <p>Questo approccio √® veloce, ma potrebbe non essere scalabile su progetti pi√π grandi, dove un uso pi√π strutturato del framework sarebbe preferibile.</p> <h3>üé® Uso delle Variabili SCSS</h3> <p>Bootstrap √® costruito con <strong>Sass (SCSS)</strong>, che permette di personalizzare il framework in modo pi√π avanzato e organizzato. √à possibile modificare le <strong>variabili predefinite</strong> di Bootstrap per adattare l‚Äôaspetto dell‚Äôinterfaccia grafica al proprio stile.</p> <h4>üîπ Esempio di Personalizzazione con SCSS</h4> <pre><code>$primary: #ff5733; $secondary: #28a745; @import 'bootstrap/scss/bootstrap';</code></pre> <p>Questa tecnica consente di cambiare i colori principali di Bootstrap senza dover sovrascrivere manualmente ogni classe CSS.</p> <h3>üñåÔ∏è Creazione di Classi Personalizzate</h3> <p>Se si desidera mantenere le funzionalit√† di Bootstrap ma aggiungere un tocco personalizzato, si possono creare classi CSS personalizzate basate su quelle esistenti:</p> <pre><code>.btn-custom { background-color: #ff5733; color: white; border-radius: 50px; padding: 10px 20px; }</code></pre> <p>Questo permette di riutilizzare facilmente gli stili personalizzati in pi√π punti del progetto.</p> <h3>üñºÔ∏è Bootstrap Themes e Template</h3> <p>Un altro metodo per personalizzare Bootstrap √® utilizzare i <strong>Bootstrap Themes</strong>, ovvero modelli preconfezionati con stili avanzati che mantengono la compatibilit√† con il framework. Si possono scaricare temi da siti come <a href='https://themes.getbootstrap.com/' target='_blank'>Bootstrap Themes</a> o creare uno proprio modificando il codice sorgente.</p> <h3>üöÄ Conclusione</h3> <p>Bootstrap offre molteplici metodi di personalizzazione che permettono di creare <strong>interfacce uniche</strong> senza dover scrivere tutto il codice CSS da zero. Con l'uso delle variabili SCSS, l'override di classi e i temi personalizzati, gli sviluppatori possono ottenere un look completamente su misura mantenendo la potenza e la flessibilit√† del framework.</p>"
                },
                {
                    "topic": "Bootstrap tutorial: creare un sito web",
                    "description": "<h3>üöÄ Creare un Sito Web con Bootstrap</h3> <p>Bootstrap √® uno dei framework pi√π utilizzati per creare siti web moderni e responsivi. In questo tutorial, realizzeremo un sito completo utilizzando le funzionalit√† principali di Bootstrap, tra cui <strong>griglie, navbar, card, form e modali</strong>. Segui passo dopo passo e avrai un sito pronto in pochi minuti!</p> <h3>üìå 1. Struttura Base del Progetto</h3> <p>Per iniziare, creiamo la struttura del progetto. Avremo un file <code>index.html</code> e una cartella <code>css</code> per eventuali stili personalizzati.</p> <pre><code> /progetto-bootstrap/ ‚îú‚îÄ‚îÄ index.html ‚îú‚îÄ‚îÄ css/ ‚îÇ   ‚îú‚îÄ‚îÄ styles.css </code></pre> <p>Ora, nel file <code>index.html</code>, includiamo Bootstrap tramite CDN:</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='it'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title>Il Mio Sito Bootstrap&lt;/title&gt; &lt;link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css'&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <h3>üìå 2. Creare una Navbar</h3> <p>La barra di navigazione √® essenziale per la navigazione del sito. Aggiungiamo una navbar Bootstrap con un menu di base.</p> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;div class='container'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='navbarNav'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Servizi&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Contatti&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <h3>üìå 3. Creare un Hero Section</h3> <p>Aggiungiamo una sezione iniziale con un'immagine di sfondo e un testo di benvenuto.</p> <pre><code>&lt;header class='bg-primary text-white text-center py-5'&gt; &lt;div class='container'&gt; &lt;h1>Benvenuti nel Mio Sito&lt;/h1&gt; &lt;p>Un sito creato con Bootstrap 5&lt;/p&gt; &lt;a href='#' class='btn btn-light'&gt;Scopri di pi√π&lt;/a&gt; &lt;/div&gt; &lt;/header&gt;</code></pre> <h3>üìå 4. Aggiungere una Griglia con Card</h3> <p>Le card sono utili per mostrare contenuti in modo ordinato e responsivo.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;div class='row'&gt; &lt;div class='col-md-4'&gt; &lt;div class='card'&gt; &lt;img src='https://via.placeholder.com/300' class='card-img-top' alt='...'/&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Titolo Card&lt;/h5&gt; &lt;p class='card-text'&gt;Testo di esempio per la card.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Scopri di pi√π&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3>üìå 5. Creare un Form di Contatto</h3> <p>Aggiungiamo un modulo di contatto per ricevere messaggi dagli utenti.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;h2>Contattaci&lt;/h2&gt; &lt;form&gt; &lt;div class='mb-3'&gt; &lt;label for='email' class='form-label'&gt;Email&lt;/label&gt; &lt;input type='email' class='form-control' id='email' placeholder='Inserisci la tua email'/&gt; &lt;/div&gt; &lt;div class='mb-3'&gt; &lt;label for='messaggio' class='form-label'&gt;Messaggio&lt;/label&gt; &lt;textarea class='form-control' id='messaggio' rows='3' placeholder='Scrivi il tuo messaggio'&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;button type='submit' class='btn btn-primary'&gt;Invia&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;</code></pre> <h3>üìå 6. Creare una Modale</h3> <p>Le modali servono per mostrare contenuti extra senza cambiare pagina.</p> <pre><code>&lt;button type='button' class='btn btn-warning' data-bs-toggle='modal' data-bs-target='#infoModal'&gt; Apri Modale &lt;/button&gt; &lt;div class='modal fade' id='infoModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Informazioni&lt;/h5&gt; &lt;button type='button' class='close' data-bs-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Contenuto della modale. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-bs-dismiss='modal'&gt;Chiudi&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3>üöÄ Conclusione</h3> <p>Abbiamo visto come costruire un sito web completo con Bootstrap in pochi passaggi. Con una <strong>navbar, un hero section, card, un form di contatto e modali</strong>, possiamo creare una pagina professionale e moderna in pochissimo tempo.</p>"
                }
            ],
            "image": "assets/guides/bootstrap_oneBlade.png"
        },
        {
            "title": "Guida Git",
            "description": "Scopri come utilizzare Git, il sistema di versionamento pi√π popolare tra gli sviluppatori, per gestire i tuoi progetti.",
            "topics": [
                {
                    "topic": "Cos'√® Git e perch√© usarlo",
                    "description": "<h3>üîπ Cos'√® Git?</h3> <p><strong>Git</strong> √® un <em>sistema di controllo di versione distribuito</em> creato da Linus Torvalds nel 2005. √à progettato per gestire lo sviluppo del codice in modo efficiente, permettendo a pi√π sviluppatori di lavorare contemporaneamente senza conflitti.</p> <h3>üìå Perch√© usare Git?</h3> <ul> <li><strong>Storico delle modifiche:</strong> Ogni modifica al codice viene tracciata, consentendo di ripristinare versioni precedenti se necessario.</li> <li><strong>Collaborazione:</strong> Pi√π sviluppatori possono lavorare sullo stesso progetto contemporaneamente, senza sovrascrivere il lavoro degli altri.</li> <li><strong>Velocit√† e affidabilit√†:</strong> Essendo un sistema distribuito, ogni copia di un repository contiene l'intera cronologia, migliorando la sicurezza dei dati.</li> <li><strong>Branching e merging:</strong> Permette di creare rami di sviluppo separati per testare nuove funzionalit√† e unirli successivamente.</li> </ul>"
                },
                {
                    "topic": "Installazione e configurazione",
                    "description": "<h3>üìå Installare Git</h3> <p>Git √® disponibile per Windows, macOS e Linux. Per installarlo, segui i passaggi seguenti:</p> <ul> <li><strong>Windows:</strong> Scarica il file di installazione dal sito ufficiale <a href='https://git-scm.com/downloads' target='_blank'>git-scm.com</a> e segui le istruzioni guidate.</li> <li><strong>macOS:</strong> Puoi installarlo con Homebrew eseguendo <code>brew install git</code>.</li> <li><strong>Linux:</strong> Usa il comando <code>sudo apt install git</code> su Debian/Ubuntu o <code>sudo dnf install git</code> su Fedora.</li> </ul> <h3>üìå Configurare Git</h3> <p>Dopo l'installazione, √® necessario configurare il proprio nome utente e email per tracciare le modifiche:</p> <pre><code>git config --global user.name 'IlTuoNome' git config --global user.email 'tuaemail@example.com'</code></pre> <p>Puoi verificare la configurazione eseguendo:</p> <pre><code>git config --list</code></pre>"
                },
                {
                    "topic": "Gestione dei repository",
                    "description": "<h3>üìå Creazione e gestione di un repository</h3> <p>Un repository Git √® una cartella che contiene i file del progetto e la loro cronologia di versionamento.</p> <h4>üîπ Creare un nuovo repository</h4> <p>Per inizializzare un repository esistente, usa il comando:</p> <pre><code>git init</code></pre> <p>Se vuoi clonare un repository remoto, usa:</p> <pre><code>git clone https://github.com/user/repository.git</code></pre> <h4>üîπ Aggiungere file al repository</h4> <p>Dopo aver creato o modificato file, puoi aggiungerli all'area di staging:</p> <pre><code>git add nomefile</code></pre> <p>Per confermare i cambiamenti, esegui un commit:</p> <pre><code>git commit -m 'Messaggio di commit'</code></pre>"
                },
                {
                    "topic": "Branching e merging",
                    "description": "<h3>üìå Gestione dei Branch in Git</h3> <p>Un <strong>branch</strong> √® una linea di sviluppo separata. Usare i branch permette di lavorare su nuove funzionalit√† senza interferire con il codice principale.</p> <h4>üîπ Creare e passare a un nuovo branch</h4> <pre><code>git branch nuovo-branch git checkout nuovo-branch</code></pre> <p>Oppure, in un solo comando:</p> <pre><code>git checkout -b nuovo-branch</code></pre> <h4>üîπ Unire un branch al codice principale</h4> <p>Una volta completata una modifica, possiamo unirla al branch principale:</p> <pre><code>git checkout main git merge nuovo-branch</code></pre> <h4>üîπ Eliminare un branch</h4> <pre><code>git branch -d nome-branch</code></pre>"
                },
                {
                    "topic": "Collaborazione con GitHub",
                    "description": "<h3>üìå Lavorare con GitHub</h3> <p><strong>GitHub</strong> √® una piattaforma di hosting per repository Git che permette la collaborazione tra sviluppatori.</p> <h4>üîπ Collegare un repository locale a GitHub</h4> <pre><code>git remote add origin https://github.com/tuoaccount/repository.git</code></pre> <h4>üîπ Inviare modifiche a GitHub</h4> <p>Per inviare il codice online, usa:</p> <pre><code>git push -u origin main</code></pre> <h4>üîπ Scaricare modifiche da GitHub</h4> <p>Se un altro sviluppatore ha aggiornato il repository, puoi scaricare le modifiche con:</p> <pre><code>git pull origin main</code></pre> <h4>üîπ Creare una Pull Request</h4> <p>Una pull request permette di proporre modifiche prima di unirle al codice principale.</p> <ol> <li>Effettua un commit delle modifiche.</li> <li>Carica le modifiche con <code>git push</code>.</li> <li>Su GitHub, apri il repository e clicca su <em>New Pull Request</em>.</li> <li>Descrivi le modifiche e invia la richiesta.</li> </ol>"
                }
            ],
            "image": "assets/guides/git_oneBlade.png"
        },
        {
            "title": "Guida HTML e CSS",
            "description": "Una guida completa per imparare le basi di HTML e CSS, i mattoni fondamentali del web design.",
            "topics": [
                {
                    "topic": "Struttura di una pagina HTML",
                    "description": "<h3>üìå Struttura di una Pagina HTML</h3> <p>Un file HTML √® composto da una struttura ben definita che organizza i contenuti di una pagina web. Ogni documento HTML inizia con una dichiarazione <code>DOCTYPE</code> per indicare al browser la versione di HTML in uso.</p> <h4>üîπ Struttura base</h4> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='it'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;Titolo della Pagina&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Benvenuto nel Mondo HTML&lt;/h1&gt; &lt;p&gt;Questo √® un paragrafo di esempio.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>Ogni pagina HTML √® divisa in due sezioni principali: <strong>l'head</strong>, che contiene metadati e collegamenti a fogli di stile e script, e il <strong>body</strong>, che contiene il contenuto visibile della pagina.</p>"
                },
                {
                    "topic": "Tag e attributi fondamentali",
                    "description": "<h3>üìå Tag e Attributi Fondamentali</h3> <p>HTML utilizza <strong>tag</strong> per strutturare il contenuto della pagina. Ogni tag ha uno scopo specifico e pu√≤ contenere <strong>attributi</strong> per definirne il comportamento o l'aspetto.</p> <h4>üîπ Tag pi√π comuni</h4> <ul> <li><code>&lt;h1&gt;...&lt;/h1&gt;</code>: Intestazioni da <code>h1</code> a <code>h6</code> per titoli di diverse dimensioni.</li> <li><code>&lt;p&gt;...&lt;/p&gt;</code>: Paragrafi di testo.</li> <li><code>&lt;a href='URL'&gt;Link&lt;/a&gt;</code>: Collegamenti ipertestuali.</li> <li><code>&lt;img src='immagine.jpg' alt='Descrizione'&gt;</code>: Inserire immagini.</li> <li><code>&lt;div&gt;...&lt;/div&gt;</code>: Contenitori per layout e strutture pi√π complesse.</li> </ul> <h4>üîπ Attributi importanti</h4> <ul> <li><code>id</code>: Identificatore univoco per un elemento.</li> <li><code>class</code>: Definisce una classe CSS per lo stile.</li> <li><code>alt</code>: Testo alternativo per immagini.</li> <li><code>href</code>: Indirizzo di destinazione per i link.</li> </ul>"
                },
                {
                    "topic": "CSS: selettori e propriet√†",
                    "description": "<h3>üìå Selettori e Propriet√† CSS</h3> <p>CSS (Cascading Style Sheets) √® il linguaggio utilizzato per definire lo stile degli elementi HTML.</p> <h4>üîπ Selettori CSS</h4> <p>I selettori servono a individuare gli elementi su cui applicare gli stili:</p> <ul> <li><code>elemento { propriet√†: valore; }</code> ‚Üí Seleziona tutti gli elementi di quel tipo.</li> <li><code>.classe { propriet√†: valore; }</code> ‚Üí Seleziona tutti gli elementi con quella classe.</li> <li><code>#id { propriet√†: valore; }</code> ‚Üí Seleziona un elemento con un id specifico.</li> </ul> <h4>üîπ Propriet√† CSS fondamentali</h4> <p>Alcuni esempi di propriet√† CSS:</p> <ul> <li><code>color</code>: Definisce il colore del testo.</li> <li><code>background-color</code>: Imposta il colore di sfondo.</li> <li><code>font-size</code>: Specifica la dimensione del testo.</li> <li><code>margin</code>: Gestisce lo spazio esterno di un elemento.</li> <li><code>padding</code>: Definisce lo spazio interno di un elemento.</li> </ul>"
                },
                {
                    "topic": "Box model e layout responsivo",
                    "description": "<h3>üìå Box Model e Layout Responsivo</h3> <p>Il <strong>Box Model</strong> definisce il modo in cui gli elementi HTML occupano spazio sulla pagina.</p> <h4>üîπ Struttura del Box Model</h4> <ul> <li><strong>Content</strong>: Il contenuto effettivo dell'elemento.</li> <li><strong>Padding</strong>: Lo spazio interno tra il contenuto e il bordo.</li> <li><strong>Border</strong>: Il contorno dell'elemento.</li> <li><strong>Margin</strong>: Lo spazio esterno che separa un elemento dagli altri.</li> </ul> <p>Per impostare margini e padding:</p> <pre><code>div { margin: 20px; padding: 10px; }</code></pre> <h4>üîπ Layout responsivo con Flexbox</h4> <p>Flexbox consente di creare layout flessibili e adattabili.</p> <pre><code>.contenitore { display: flex; justify-content: space-between; }</code></pre> <h4>üîπ CSS Grid</h4> <p>Un'altra tecnica potente per layout avanzati:</p> <pre><code>.grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }</code></pre>"
                },
                {
                    "topic": "Animazioni e transizioni con CSS",
                    "description": "<h3>üìå Animazioni e Transizioni con CSS</h3> <p>CSS permette di aggiungere effetti di animazione agli elementi senza l‚Äôuso di JavaScript.</p> <h4>üîπ Transizioni CSS</h4> <p>Una transizione permette di modificare gradualmente una propriet√† CSS:</p> <pre><code>button { background-color: blue; transition: background-color 0.3s ease-in-out; } button:hover { background-color: red; }</code></pre> <h4>üîπ Animazioni con Keyframes</h4> <p>Con <code>@keyframes</code>, √® possibile creare animazioni complesse:</p> <pre><code>@keyframes movimento { from { transform: translateX(0); } to { transform: translateX(100px); } } div { animation: movimento 2s infinite alternate; }</code></pre>"
                }
            ],
            "image": "assets/guides/html_css_oneBlade.png"
        },
        {
            "title": "Guida TypeScript",
            "description": "Un'introduzione a TypeScript, il superset di JavaScript che migliora la gestione dei tipi e il controllo del codice.",
            "topics": [
                {
                    "topic": "Perch√© usare TypeScript",
                    "description": "<h3>üìå Perch√© usare TypeScript?</h3> <p><strong>TypeScript</strong> √® un superset di JavaScript sviluppato da Microsoft che aggiunge il supporto per i <strong>tipi statici</strong>, migliorando la <em>leggibilit√†</em>, la <em>manutenibilit√†</em> e la <em>sicurezza</em> del codice. Ecco alcuni vantaggi chiave:</p> <ul> <li><strong>Prevenzione degli errori:</strong> Grazie ai tipi statici, TypeScript aiuta a evitare errori comuni nel codice.</li> <li><strong>Autocompletamento e IntelliSense:</strong> Fornisce suggerimenti intelligenti e documentazione in tempo reale.</li> <li><strong>Refactoring sicuro:</strong> Migliora la capacit√† di modificare il codice senza introdurre bug.</li> <li><strong>Compatibilit√† con JavaScript:</strong> Pu√≤ essere utilizzato su qualsiasi codice JavaScript esistente.</li> <li><strong>Supporto avanzato per ES6+:</strong> Include funzionalit√† moderne come async/await, destructuring e moduli ES6.</li> </ul>"
                },
                {
                    "topic": "Tipi e Interfacce",
                    "description": "<h3>üìå Tipi e Interfacce</h3> <p>TypeScript introduce i <strong>tipi statici</strong>, permettendo di dichiarare esplicitamente il tipo di variabili e funzioni.</p> <h4>üîπ Tipi di base</h4> <p>TypeScript supporta tipi primitivi come <code>string</code>, <code>number</code>, <code>boolean</code>, <code>any</code>, <code>null</code> e <code>undefined</code>.</p> <pre><code>let nome: string = 'Alice'; let eta: number = 30; let isOnline: boolean = true;</code></pre> <h4>üîπ Interfacce</h4> <p>Le interfacce permettono di definire la struttura di un oggetto:</p> <pre><code>interface Persona { nome: string; eta: number; } let user: Persona = { nome: 'Alice', eta: 30 };</code></pre> <p>Le interfacce aiutano a scrivere codice pi√π <strong>leggibile</strong> e <strong>scalabile</strong>.</p>"
                },
                {
                    "topic": "Classi e Modificatori di Accesso",
                    "description": "<h3>üìå Classi e Modificatori di Accesso</h3> <p>TypeScript supporta la programmazione orientata agli oggetti con classi e modificatori di accesso come <code>public</code>, <code>private</code> e <code>protected</code>.</p> <h4>üîπ Dichiarazione di una Classe</h4> <pre><code>class Persona { nome: string; constructor(nome: string) { this.nome = nome; } saluta() { return `Ciao, sono ${this.nome}`; } } let p = new Persona('Alice'); console.log(p.saluta());</code></pre> <h4>üîπ Modificatori di Accesso</h4> <p>Permettono di controllare la visibilit√† delle propriet√† e dei metodi:</p> <ul> <li><code>public</code>: Accessibile ovunque.</li> <li><code>private</code>: Accessibile solo all'interno della classe.</li> <li><code>protected</code>: Accessibile solo alla classe e alle sue sottoclassi.</li> </ul> <pre><code>class Persona { private eta: number = 30; public getEta() { return this.eta; } }</code></pre>"
                },
                {
                    "topic": "Enum e Tipi Avanzati",
                    "description": "<h3>üìå Enum e Tipi Avanzati</h3> <p>TypeScript introduce il concetto di <strong>Enum</strong> per definire insiemi di valori costanti.</p> <h4>üîπ Dichiarazione di un Enum</h4> <pre><code>enum Stato { Attivo, Inattivo, Sospeso } let utente: Stato = Stato.Attivo;</code></pre> <h4>üîπ Tipi Avanzati</h4> <p>Oltre ai tipi di base, TypeScript include:</p> <ul> <li><code>union</code>: Una variabile pu√≤ avere pi√π tipi.</li> <li><code>tuple</code>: Definisce array con lunghezza e tipi fissi.</li> <li><code>type</code>: Permette di creare alias di tipi.</li> </ul> <pre><code>type ID = string | number; let userId: ID = 123;</code></pre>"
                },
                {
                    "topic": "Moduli e Namespace",
                    "description": "<h3>üìå Moduli e Namespace</h3> <p>TypeScript supporta la modularizzazione del codice tramite moduli e namespace.</p> <h4>üîπ Creazione di un Modulo</h4> <p>Un modulo pu√≤ esportare e importare elementi tra file diversi:</p> <pre><code>// modulo.ts export function saluta() { return 'Ciao'; } // main.ts import { saluta } from './modulo'; console.log(saluta());</code></pre> <h4>üîπ Uso dei Namespace</h4> <p>I namespace raggruppano logicamente pi√π funzioni:</p> <pre><code>namespace Utility { export function log(msg: string) { console.log(msg); } } Utility.log('Messaggio');</code></pre>"
                },
                {
                    "topic": "Compilazione e Debugging",
                    "description": "<h3>üìå Compilazione e Debugging</h3> <p>TypeScript viene compilato in JavaScript utilizzando il comando <code>tsc</code>.</p> <h4>üîπ Installazione di TypeScript</h4> <pre><code>npm install -g typescript</code></pre> <h4>üîπ Compilazione di un file TypeScript</h4> <pre><code>tsc script.ts</code></pre> <h4>üîπ Uso del file tsconfig.json</h4> <p>Il file <code>tsconfig.json</code> permette di configurare la compilazione:</p> <pre><code>{ 'compilerOptions': { 'target': 'ES6', 'module': 'CommonJS' } }</code></pre> <h4>üîπ Debugging con Visual Studio Code</h4> <p>VS Code permette di eseguire il debug del codice TypeScript direttamente nell‚Äôeditor.</p>"
                }
            ],
            "image": "assets/guides/typescript_oneBlade.png"
        },
        {
            "title": "Guida SQL",
            "description": "Impara SQL, il linguaggio essenziale per la gestione dei database relazionali.",
            "topics": [
                {
                    "topic": "Introduzione ai database relazionali",
                    "description": "Un database relazionale √® una raccolta di dati organizzati in tabelle collegate tra loro. SQL (Structured Query Language) √® il linguaggio utilizzato per interagire con questi database."
                },
                {
                    "topic": "Creazione e gestione delle tabelle",
                    "description": "In SQL, le tabelle vengono create con il comando `CREATE TABLE` e possono essere modificate con `ALTER TABLE`. Le colonne devono essere definite con un tipo di dato appropriato come `VARCHAR`, `INT` o `DATE`."
                }
            ],
            "image": "assets/guides/sql_oneBlade.png"
        }
    ]
}