{
    "guides": [
        {
            "title": "Guía Bootstrap",
            "description": "Una guía detallada sobre Bootstrap, el framework CSS más utilizado para crear sitios web responsivos y modernos.",
            "topics": [
                {
                    "topic": "Introducción a Bootstrap",
                    "description": "<strong>Bootstrap</strong> es un framework <em>open-source</em> creado por Twitter con el objetivo de simplificar el desarrollo de interfaces de usuario <strong>responsive</strong> y accesibles para todos los dispositivos. <h3>¿Por qué usar Bootstrap?</h3> <ul> <li><strong>Facilidad de uso:</strong> Incluye clases CSS listas para usar que simplifican la creación de layouts y componentes gráficos.</li> <li><strong>Responsive Design:</strong> Adapta automáticamente los layouts a los diferentes dispositivos, garantizando una experiencia de usuario óptima en móviles, tabletas y escritorios.</li> <li><strong>Compatibilidad Cross-browser:</strong> Soporta todos los navegadores modernos.</li> <li><strong>Componentes predefinidos:</strong> Incluye elementos como navbar, modales, formularios, tarjetas y muchos más.</li> <li><strong>Soporte para JavaScript:</strong> Ofrece funcionalidades avanzadas sin necesidad de librerías externas.</li> </ul> <h3>¿Cómo Funciona Bootstrap?</h3> <p>Bootstrap se basa en un sistema modular que comprende una cuadrícula flexible para layouts dinámicos y una serie de componentes CSS y JavaScript para elementos interactivos.</p> <h3>Conclusión</h3> <p>Bootstrap es una herramienta <strong>esencial</strong> para cualquier desarrollador que quiera realizar sitios modernos, performantes y <em>responsive</em> sin tener que escribir código CSS complejo.</p>"
                },
                {
                    "topic": "Estructura básica de Bootstrap",
                    "description": "<h3> Introducción a la Estructura de Bootstrap</h3> <p>Bootstrap se basa en una <strong>estructura modular</strong> y un sistema de <strong>cuadrícula flexible</strong> que permite a los desarrolladores crear layouts responsivos de manera simple y rápida. Gracias a una combinación de <em>HTML, CSS y JavaScript</em>, Bootstrap proporciona una serie de clases predefinidas que facilitan la organización del contenido en cualquier tipo de pantalla, desde <strong>móviles</strong> hasta <strong>escritorios</strong>.</p> <h3> La Cuadrícula de Bootstrap: El Corazón del Layout</h3> <p>Bootstrap utiliza un sistema de cuadrícula basado en <strong>12 columnas</strong>, que permite organizar los elementos de manera dinámica. El sistema es altamente flexible y permite combinar columnas para obtener layouts complejos y completamente responsivos.</p> <h4> Estructura básica de la cuadrícula</h4> <p>Para crear una cuadrícula en Bootstrap, se utiliza la clase <code>.container</code>, dentro de la cual se definen las filas (<code>.row</code>) y las columnas (<code>.col</code>):</p> <pre><code>&lt;div class='container'&gt; &lt;div class='row'&gt; &lt;div class='col-md-6 bg-primary text-white'&gt;Columna 1&lt;/div&gt; &lt;div class='col-md-6 bg-secondary text-white'&gt;Columna 2&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p> El código anterior crea una fila con <strong>dos columnas iguales</strong>, cada una ocupando la mitad de la pantalla en dispositivos de tamaño mediano (<code>.col-md-6</code>).</p> <h3> Contenedores: Fixed y Fluid</h3> <p>Bootstrap ofrece dos tipos de contenedores para controlar el ancho del layout:</p> <ul> <li><strong><code>.container</code></strong>: Tiene un ancho fijo y se adapta automáticamente a diferentes tamaños de pantalla.</li> <li><strong><code>.container-fluid</code></strong>: Ocupa siempre el <strong>100% del ancho</strong> disponible.</li> </ul> <h4> Ejemplo de uso:</h4> <pre><code>&lt;div class='container-fluid bg-dark text-white p-3'&gt; Este contenedor se extiende a todo el ancho de la pantalla. &lt;/div&gt;</code></pre> <h3> Clases de Layout Responsive</h3> <p>Bootstrap utiliza clases de interrupción de pantalla (breakpoints) para adaptar el layout a diferentes resoluciones:</p> <table border='1'> <tr> <th>Clase</th> <th>Breakpoint</th> </tr> <tr> <td><code>.col-</code></td> <td>&gt;= 0px (Todos los dispositivos)</td> </tr> <tr> <td><code>.col-sm-</code></td> <td>&gt;= 576px (Smartphones)</td> </tr> <tr> <td><code>.col-md-</code></td> <td>&gt;= 768px (Tabletas)</td> </tr> <tr> <td><code>.col-lg-</code></td> <td>&gt;= 992px (Laptops)</td> </tr> <tr> <td><code>.col-xl-</code></td> <td>&gt;= 1200px (Pantallas grandes)</td> </tr> </table> <p>Estas clases permiten crear columnas que se redimensionan automáticamente según el tamaño de la pantalla.</p> <h3> Personalización con Espaciados y Márgenes</h3> <p>Bootstrap ofrece un sistema de <strong>espaciados predefinidos</strong> mediante clases como <code>.p-*</code> para el padding y <code>.m-*</code> para los márgenes:</p> <ul> <li><code>.p-3</code>: Añade padding interno uniforme.</li> <li><code>.m-2</code>: Añade márgenes externos de tamaño medio.</li> </ul> <h4> Ejemplo:</h4> <pre><code>&lt;div class='bg-info text-white p-3 m-2'&gt; Este div tiene padding y márgenes personalizados. &lt;/div&gt;</code></pre> <h3> Conclusión</h3> <p>La estructura básica de Bootstrap permite construir <strong>layouts flexibles y responsivos</strong> sin tener que escribir código CSS complejo. Gracias al sistema de cuadrícula, los contenedores y las clases de personalización, Bootstrap es la elección ideal para desarrolladores y diseñadores que quieren crear páginas modernas de manera simple y eficiente.</p>"
                },
                {
                    "topic": "Componentes principales",
                    "description": "<h3> Introducción a los Componentes de Bootstrap</h3> <p>Uno de los puntos fuertes de Bootstrap es su vasta colección de <strong>componentes predefinidos</strong> que permiten añadir rápidamente elementos interactivos y estilísticamente coherentes a un sitio web sin tener que escribir código CSS personalizado. Los componentes de Bootstrap incluyen <strong>botones, navbar, modales, tarjetas, formularios, tooltip</strong> y mucho más, todos optimizados para una experiencia de usuario fluida en cualquier dispositivo.</p> <h3> Botones y Botones de Acción</h3> <p>Los botones en Bootstrap son altamente personalizables y se crean con la clase <code>.btn</code>. Existen diferentes variantes basadas en colores y tamaños.</p> <h4> Ejemplo de Botones</h4> <pre><code>&lt;button class='btn btn-primary'&gt;Botón Primario&lt;/button&gt; &lt;button class='btn btn-secondary'&gt;Botón Secundario&lt;/button&gt; &lt;button class='btn btn-success'&gt;Botón de Éxito&lt;/button&gt;</code></pre> <p>Estos botones tienen colores estandarizados y pueden combinarse con clases como <code>.btn-lg</code> y <code>.btn-sm</code> para ajustar su tamaño.</p> <h3> Navbar: Barras de Navegación</h3> <p>La navbar es uno de los elementos más utilizados para estructurar la navegación de un sitio web. Bootstrap ofrece una solución flexible y fácilmente personalizable.</p> <h4> Ejemplo de Navbar</h4> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#menu'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='menu'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Inicio&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Servicios&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <p>Esta navbar es <strong>responsiva</strong>: en dispositivos móviles el menú se compacta y puede ser expandido con un botón.</p> <h3> Tarjetas: Contenedores Estilizados</h3> <p>Las tarjetas son contenedores versátiles que permiten visualizar información de manera estructurada.</p> <h4> Ejemplo de Tarjeta</h4> <pre><code>&lt;div class='card' style='width: 18rem;'&gt; &lt;img src='imagen.jpg' class='card-img-top' alt='...'&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Título de la Tarjeta&lt;/h5&gt; &lt;p class='card-text'&gt;Texto de ejemplo para la tarjeta.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Descubre más&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Las tarjetas pueden incluir imágenes, texto y botones, haciéndolas perfectas para las previsualizaciones de contenidos o productos.</p> <h3> Modales: Ventanas de Diálogo Interactivas</h3> <p>Otro componente potente de Bootstrap son los modales, ventanas que se abren sobre el contenido de la página para mostrar mensajes o formularios.</p> <h4> Ejemplo de Modal</h4> <pre><code>&lt;button type='button' class='btn btn-primary' data-toggle='modal' data-target='#exampleModal'&gt; Abrir Modal &lt;/button&gt; &lt;div class='modal fade' id='exampleModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Título del Modal&lt;/h5&gt; &lt;button type='button' class='close' data-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Contenido del Modal. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-dismiss='modal'&gt;Cerrar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Los modales son útiles para mostrar información sin cambiar de página, mejorando la usabilidad.</p> <h3> Tooltip y Popover</h3> <p>Para mejorar la interacción del usuario, Bootstrap incluye tooltip (sugerencias al pasar el ratón) y popover (ventanas informativas clicables).</p> <h4> Ejemplo de Tooltip</h4> <pre><code>&lt;button type='button' class='btn btn-secondary' data-toggle='tooltip' title='Información extra'&gt; Pasa por encima &lt;/button&gt;</code></pre> <p>Los tooltip mejoran la accesibilidad y la experiencia del usuario proporcionando información adicional.</p> <h3> Conclusión</h3> <p>Los componentes de Bootstrap simplifican la creación de interfaces de usuario <strong>modernas, interactivas y accesibles</strong> con pocos comandos simples. Gracias a botones, navbar, modales y tooltip, los desarrolladores pueden construir <strong>aplicaciones web funcionales e intuitivas</strong> en muy poco tiempo.</p>"
                },
                {
                    "topic": "Personalización de Bootstrap",
                    "description": "<h3> Personalización de Bootstrap</h3> <p>Uno de los puntos fuertes de Bootstrap es su capacidad de ser <strong>altamente personalizable</strong>, permitiendo a los desarrolladores adaptar el framework a sus propias necesidades sin perder las ventajas de las clases predefinidas. Hay varias formas de personalizar Bootstrap, incluyendo <strong>override de clases CSS</strong>, <strong>uso de variables SCSS</strong>, y <strong>Bootstrap Themes</strong>.</p> <h3> Override de Estilos CSS</h3> <p>El método más simple para personalizar Bootstrap es sobrescribir las clases CSS directamente en tu hoja de estilo. Por ejemplo, si quieres cambiar el color de todos los botones primarios, simplemente escribe:</p> <pre><code>.btn-primary { background-color: #ff5733; border-color: #ff5733; }</code></pre> <p>Este enfoque es rápido, pero podría no ser escalable en proyectos más grandes, donde un uso más estructurado del framework sería preferible.</p> <h3> Uso de las Variables SCSS</h3> <p>Bootstrap está construido con <strong>Sass (SCSS)</strong>, lo que permite personalizar el framework de manera más avanzada y organizada. Es posible modificar las <strong>variables predefinidas</strong> de Bootstrap para adaptar el aspecto de la interfaz gráfica a tu propio estilo.</p> <h4> Ejemplo de Personalización con SCSS</h4> <pre><code>$primary: #ff5733; $secondary: #28a745; @import 'bootstrap/scss/bootstrap';</code></pre> <p>Esta técnica permite cambiar los colores principales de Bootstrap sin tener que sobrescribir manualmente cada clase CSS.</p> <h3> Creación de Clases Personalizadas</h3> <p>Si deseas mantener las funcionalidades de Bootstrap pero añadir un toque personalizado, puedes crear clases CSS personalizadas basadas en las existentes:</p> <pre><code>.btn-custom { background-color: #ff5733; color: white; border-radius: 50px; padding: 10px 20px; }</code></pre> <p>Esto permite reutilizar fácilmente los estilos personalizados en varios puntos del proyecto.</p> <h3> Bootstrap Themes y Templates</h3> <p>Otro método para personalizar Bootstrap es utilizar los <strong>Bootstrap Themes</strong>, es decir, plantillas preconfeccionadas con estilos avanzados que mantienen la compatibilidad con el framework. Puedes descargar temas de sitios como <a href='https://themes.getbootstrap.com/' target='_blank'>Bootstrap Themes</a> o crear uno propio modificando el código fuente.</p> <h3> Conclusión</h3> <p>Bootstrap ofrece múltiples métodos de personalización que permiten crear <strong>interfaces únicas</strong> sin tener que escribir todo el código CSS desde cero. Con el uso de variables SCSS, el override de clases y los temas personalizados, los desarrolladores pueden obtener un look completamente a medida manteniendo la potencia y la flexibilidad del framework.</p>"
                },
                {
                    "topic": "Tutorial de Bootstrap: crear un sitio web",
                    "description": "<h3> Crear un Sitio Web con Bootstrap</h3> <p>Bootstrap es uno de los frameworks más utilizados para crear sitios web modernos y responsivos. En este tutorial, realizaremos un sitio completo utilizando las funcionalidades principales de Bootstrap, incluyendo <strong>cuadrículas, navbar, tarjetas, formularios y modales</strong>. ¡Sigue paso a paso y tendrás un sitio listo en pocos minutos!</p> <h3> 1. Estructura Básica del Proyecto</h3> <p>Para empezar, creamos la estructura del proyecto. Tendremos un archivo <code>index.html</code> y una carpeta <code>css</code> para estilos personalizados.</p> <pre><code> /proyecto-bootstrap/ ├── index.html ├── css/ │   ├── styles.css </code></pre> <p>Ahora, en el archivo <code>index.html</code>, incluimos Bootstrap a través de CDN:</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='es'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title>Mi Sitio Bootstrap&lt;/title&gt; &lt;link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css'&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <h3> 2. Crear una Navbar</h3> <p>La barra de navegación es esencial para la navegación del sitio. Añadimos una navbar Bootstrap con un menú básico.</p> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;div class='container'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='navbarNav'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Inicio&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Servicios&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Contactos&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <h3> 3. Crear un Hero Section</h3> <p>Añadimos una sección inicial con una imagen de fondo y un texto de bienvenida.</p> <pre><code>&lt;header class='bg-primary text-white text-center py-5'&gt; &lt;div class='container'&gt; &lt;h1>Bienvenidos a Mi Sitio&lt;/h1&gt; &lt;p>Un sitio creado con Bootstrap 5&lt;/p&gt; &lt;a href='#' class='btn btn-light'&gt;Descubre más&lt;/a&gt; &lt;/div&gt; &lt;/header&gt;</code></pre> <h3> 4. Añadir una Cuadrícula con Tarjetas</h3> <p>Las tarjetas son útiles para mostrar contenidos de manera ordenada y responsiva.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;div class='row'&gt; &lt;div class='col-md-4'&gt; &lt;div class='card'&gt; &lt;img src='https://via.placeholder.com/300' class='card-img-top' alt='...'/&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Título de la Tarjeta&lt;/h5&gt; &lt;p class='card-text'&gt;Texto de ejemplo para la tarjeta.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Descubre más&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3> 5. Crear un Formulario de Contacto</h3> <p>Añadimos un formulario de contacto para recibir mensajes de los usuarios.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;h2>Contáctanos&lt;/h2&gt; &lt;form&gt; &lt;div class='mb-3'&gt; &lt;label for='email' class='form-label'&gt;Email&lt;/label&gt; &lt;input type='email' class='form-control' id='email' placeholder='Introduce tu email'/&gt; &lt;/div&gt; &lt;div class='mb-3'&gt; &lt;label for='mensaje' class='form-label'&gt;Mensaje&lt;/label&gt; &lt;textarea class='form-control' id='mensaje' rows='3' placeholder='Escribe tu mensaje'&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;button type='submit' class='btn btn-primary'&gt;Enviar&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;</code></pre> <h3> 6. Crear un Modal</h3> <p>Los modales sirven para mostrar contenidos extra sin cambiar de página.</p> <pre><code>&lt;button type='button' class='btn btn-warning' data-bs-toggle='modal' data-bs-target='#infoModal'&gt; Abrir Modal &lt;/button&gt; &lt;div class='modal fade' id='infoModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Información&lt;/h5&gt; &lt;button type='button' class='close' data-bs-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Contenido del modal. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-bs-dismiss='modal'&gt;Cerrar&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3> Conclusión</h3> <p>Hemos visto cómo construir un sitio web completo con Bootstrap en pocos pasos. Con una <strong>navbar, un hero section, tarjetas, un formulario de contacto y modales</strong>, podemos crear una página profesional y moderna en muy poco tiempo.</p>"
                }
            ],
            "image": "assets/guides/bootstrap_oneBlade.png"
        },
        {
            "title": "Guía Git",
            "description": "Descubre cómo utilizar Git, el sistema de versionado más popular entre los desarrolladores, para gestionar tus proyectos.",
            "topics": [
                {
                    "topic": "Qué es Git y por qué usarlo",
                    "description": "<h3> Qué es Git?</h3> <p><strong>Git</strong> es un <em>sistema de control de versión distribuido</em> creado por Linus Torvalds en 2005. Está diseñado para gestionar el desarrollo del código de manera eficiente, permitiendo a varios desarrolladores trabajar simultáneamente sin conflictos.</p> <h3> Por qué usar Git?</h3> <ul> <li><strong>Historial de cambios:</strong> Cada cambio en el código se rastrea, permitiendo restaurar versiones anteriores si es necesario.</li> <li><strong>Colaboración:</strong> Varios desarrolladores pueden trabajar en el mismo proyecto simultáneamente, sin sobrescribir el trabajo de los demás.</li> <li><strong>Velocidad y fiabilidad:</strong> Al ser un sistema distribuido, cada copia de un repositorio contiene todo el historial, mejorando la seguridad de los datos.</li> <li><strong>Branching y merging:</strong> Permite crear ramas de desarrollo separadas para probar nuevas funcionalidades y unirlas posteriormente.</li> </ul>"
                },
                {
                    "topic": "Instalación y configuración",
                    "description": "<h3> Instalar Git</h3> <p>Git está disponible para Windows, macOS y Linux. Para instalarlo, sigue los siguientes pasos:</p> <ul> <li><strong>Windows:</strong> Descarga el archivo de instalación desde el sitio oficial <a href='https://git-scm.com/downloads' target='_blank'>git-scm.com</a> y sigue las instrucciones guiadas.</li> <li><strong>macOS:</strong> Puedes instalarlo con Homebrew ejecutando <code>brew install git</code>.</li> <li><strong>Linux:</strong> Usa el comando <code>sudo apt install git</code> en Debian/Ubuntu o <code>sudo dnf install git</code> en Fedora.</li> </ul> <h3> Configurar Git</h3> <p>Después de la instalación, es necesario configurar tu nombre de usuario y correo electrónico para rastrear los cambios:</p> <pre><code>git config --global user.name 'TuNombre' git config --global user.email 'tuemail@example.com'</code></pre> <p>Puedes verificar la configuración ejecutando:</p> <pre><code>git config --list</code></pre>"
                },
                {
                    "topic": "Gestión de los repositorios",
                    "description": "<h3> Creación y gestión de un repositorio</h3> <p>Un repositorio Git es una carpeta que contiene los archivos del proyecto y su historial de versionado.</p> <h4> Crear un nuevo repositorio</h4> <p>Para inicializar un repositorio existente, usa el comando:</p> <pre><code>git init</code></pre> <p>Si quieres clonar un repositorio remoto, usa:</p> <pre><code>git clone https://github.com/user/repository.git</code></pre> <h4> Añadir archivos al repositorio</h4> <p>Después de crear o modificar archivos, puedes añadirlos al área de staging:</p> <pre><code>git add nombrearchivo</code></pre> <p>Para confirmar los cambios, ejecuta un commit:</p> <pre><code>git commit -m 'Mensaje de commit'</code></pre>"
                },
                {
                    "topic": "Branching y merging",
                    "description": "<h3> Gestión de Branch en Git</h3> <p>Una <strong>branch</strong> es una línea de desarrollo separada. Usar branches permite trabajar en nuevas funcionalidades sin interferir con el código principal.</p> <h4> Crear y cambiar a una nueva branch</h4> <pre><code>git branch nueva-branch git checkout nueva-branch</code></pre> <p>O, en un solo comando:</p> <pre><code>git checkout -b nueva-branch</code></pre> <h4> Unir una branch al código principal</h4> <p>Una vez completada una modificación, podemos unirla a la branch principal:</p> <pre><code>git checkout main git merge nueva-branch</code></pre> <h4> Eliminar una branch</h4> <pre><code>git branch -d nombre-branch</code></pre>"
                },
                {
                    "topic": "Colaboración con GitHub",
                    "description": "<h3> Trabajar con GitHub</h3> <p><strong>GitHub</strong> es una plataforma de hosting para repositorios Git que permite la colaboración entre desarrolladores.</p> <h4> Conectar un repositorio local a GitHub</h4> <pre><code>git remote add origin https://github.com/tuusuario/repository.git</code></pre> <h4> Enviar cambios a GitHub</h4> <p>Para enviar el código online, usa:</p> <pre><code>git push -u origin main</code></pre> <h4> Descargar cambios de GitHub</h4> <p>Si otro desarrollador ha actualizado el repositorio, puedes descargar los cambios con:</p> <pre><code>git pull origin main</code></pre> <h4> Crear una Pull Request</h4> <p>Una pull request permite proponer cambios antes de unirlos al código principal.</p> <ol> <li>Realiza un commit de los cambios.</li> <li>Sube los cambios con <code>git push</code>.</li> <li>En GitHub, abre el repositorio y haz clic en <em>New Pull Request</em>.</li> <li>Describe los cambios y envía la solicitud.</li> </ol>"
                }
            ],
            "image": "assets/guides/git_oneBlade.png"
        },
        {
            "title": "Guía HTML y CSS",
            "description": "Una guía completa para aprender las bases de HTML y CSS, los bloques fundamentales del diseño web.",
            "topics": [
                {
                    "topic": "Estructura de una página HTML",
                    "description": "<h3> Estructura de una Página HTML</h3> <p>Un archivo HTML está compuesto por una estructura bien definida que organiza los contenidos de una página web. Cada documento HTML comienza con una declaración <code>DOCTYPE</code> para indicar al navegador la versión de HTML en uso.</p> <h4> Estructura básica</h4> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='es'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;Título de la Página&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Bienvenido al Mundo HTML&lt;/h1&gt; &lt;p&gt;Este es un párrafo de ejemplo.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>Cada página HTML está dividida en dos secciones principales: <strong>el head</strong>, que contiene metadatos y enlaces a hojas de estilo y scripts, y el <strong>body</strong>, que contiene el contenido visible de la página.</p>"
                },
                {
                    "topic": "Etiquetas y atributos fundamentales",
                    "description": "<h3> Etiquetas y Atributos Fundamentales</h3> <p>HTML utiliza <strong>etiquetas</strong> para estructurar el contenido de la página. Cada etiqueta tiene un propósito específico y puede contener <strong>atributos</strong> para definir su comportamiento o apariencia.</p> <h4> Etiquetas más comunes</h4> <ul> <li><code>&lt;h1&gt;...&lt;/h1&gt;</code>: Encabezados de <code>h1</code> a <code>h6</code> para títulos de diferentes tamaños.</li> <li><code>&lt;p&gt;...&lt;/p&gt;</code>: Párrafos de texto.</li> <li><code>&lt;a href='URL'&gt;Enlace&lt;/a&gt;</code>: Enlaces hipertextuales.</li> <li><code>&lt;img src='imagen.jpg' alt='Descripción'&gt;</code>: Insertar imágenes.</li> <li><code>&lt;div&gt;...&lt;/div&gt;</code>: Contenedores para layouts y estructuras más complejas.</li> </ul> <h4> Atributos importantes</h4> <ul> <li><code>id</code>: Identificador único para un elemento.</li> <li><code>class</code>: Define una clase CSS para el estilo.</li> <li><code>alt</code>: Texto alternativo para imágenes.</li> <li><code>href</code>: Dirección de destino para los enlaces.</li> </ul>"
                },
                {
                    "topic": "CSS: selectores y propiedades",
                    "description": "<h3> Selectores y Propiedades CSS</h3> <p>CSS (Cascading Style Sheets) es el lenguaje utilizado para definir el estilo de los elementos HTML.</p> <h4> Selectores CSS</h4> <p>Los selectores sirven para identificar los elementos sobre los que aplicar los estilos:</p> <ul> <li><code>elemento { propiedad: valor; }</code> → Selecciona todos los elementos de ese tipo.</li> <li><code>.clase { propiedad: valor; }</code> → Selecciona todos los elementos con esa clase.</li> <li><code>#id { propiedad: valor; }</code> → Selecciona un elemento con un id específico.</li> </ul> <h4> Propiedades CSS fundamentales</h4> <p>Algunos ejemplos de propiedades CSS:</p> <ul> <li><code>color</code>: Define el color del texto.</li> <li><code>background-color</code>: Establece el color de fondo.</li> <li><code>font-size</code>: Especifica el tamaño del texto.</li> <li><code>margin</code>: Gestiona el espacio exterior de un elemento.</li> <li><code>padding</code>: Define el espacio interior de un elemento.</li> </ul>"
                },
                {
                    "topic": "Box model y layout responsivo",
                    "description": "<h3> Box Model y Layout Responsivo</h3> <p>El <strong>Box Model</strong> define la forma en que los elementos HTML ocupan espacio en la página.</p> <h4> Estructura del Box Model</h4> <ul> <li><strong>Content</strong>: El contenido real del elemento.</li> <li><strong>Padding</strong>: El espacio interior entre el contenido y el borde.</li> <li><strong>Border</strong>: El contorno del elemento.</li> <li><strong>Margin</strong>: El espacio exterior que separa un elemento de los demás.</li> </ul> <p>Para establecer márgenes y padding:</p> <pre><code>div { margin: 20px; padding: 10px; }</code></pre> <h4> Layout responsivo con Flexbox</h4> <p>Flexbox permite crear layouts flexibles y adaptables.</p> <pre><code>.contenedor { display: flex; justify-content: space-between; }</code></pre> <h4> CSS Grid</h4> <p>Otra técnica poderosa para layouts avanzados:</p> <pre><code>.grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }</code></pre>"
                },
                {
                    "topic": "Animaciones y transiciones con CSS",
                    "description": "<h3> Animaciones y Transiciones con CSS</h3> <p>CSS permite añadir efectos de animación a los elementos sin el uso de JavaScript.</p> <h4> Transiciones CSS</h4> <p>Una transición permite modificar gradualmente una propiedad CSS:</p> <pre><code>button { background-color: blue; transition: background-color 0.3s ease-in-out; } button:hover { background-color: red; }</code></pre> <h4> Animaciones con Keyframes</h4> <p>Con <code>@keyframes</code>, es posible crear animaciones complejas:</p> <pre><code>@keyframes movimiento { from { transform: translateX(0); } to { transform: translateX(100px); } } div { animation: movimiento 2s infinite alternate; }</code></pre>"
                }
            ],
            "image": "assets/guides/html_css_oneBlade.png"
        },
        {
            "title": "Guía TypeScript",
            "description": "Una introducción a TypeScript, el superset de JavaScript que mejora la gestión de tipos y el control del código.",
            "topics": [
                {
                    "topic": "Por qué usar TypeScript",
                    "description": "<h3> Por qué usar TypeScript?</h3> <p><strong>TypeScript</strong> es un superset de JavaScript desarrollado por Microsoft que añade soporte para <strong>tipos estáticos</strong>, mejorando la <em>legibilidad</em>, la <em>mantenibilidad</em> y la <em>seguridad</em> del código. Aquí algunos beneficios clave:</p> <ul> <li><strong>Prevención de errores:</strong> Gracias a los tipos estáticos, TypeScript ayuda a evitar errores comunes en el código.</li> <li><strong>Autocompletado e IntelliSense:</strong> Proporciona sugerencias inteligentes y documentación en tiempo real.</li> <li><strong>Refactorización segura:</strong> Mejora la capacidad de modificar el código sin introducir bugs.</li> <li><strong>Compatibilidad con JavaScript:</strong> Puede ser utilizado en cualquier código JavaScript existente.</li> <li><strong>Soporte avanzado para ES6+:</strong> Incluye funcionalidades modernas como async/await, destructuring y módulos ES6.</li> </ul>"
                },
                {
                    "topic": "Tipos e Interfaces",
                    "description": "<h3> Tipos e Interfaces</h3> <p>TypeScript introduce los <strong>tipos estáticos</strong>, permitiendo declarar explícitamente el tipo de variables y funciones.</p> <h4> Tipos básicos</h4> <p>TypeScript soporta tipos primitivos como <code>string</code>, <code>number</code>, <code>boolean</code>, <code>any</code>, <code>null</code> y <code>undefined</code>.</p> <pre><code>let nombre: string = 'Alice'; let edad: number = 30; let isOnline: boolean = true;</code></pre> <h4> Interfaces</h4> <p>Las interfaces permiten definir la estructura de un objeto:</p> <pre><code>interface Persona { nombre: string; edad: number; } let user: Persona = { nombre: 'Alice', edad: 30 };</code></pre> <p>Las interfaces ayudan a escribir código más <strong>legible</strong> y <strong>escalable</strong>.</p>"
                },
                {
                    "topic": "Clases y Modificadores de Acceso",
                    "description": "<h3> Clases y Modificadores de Acceso</h3> <p>TypeScript soporta la programación orientada a objetos con clases y modificadores de acceso como <code>public</code>, <code>private</code> y <code>protected</code>.</p> <h4> Declaración de una Clase</h4> <pre><code>class Persona { nombre: string; constructor(nombre: string) { this.nombre = nombre; } saluda() { return `Hola, soy ${this.nombre}`; } } let p = new Persona('Alice'); console.log(p.saluda());</code></pre> <h4> Modificadores de Acceso</h4> <p>Permiten controlar la visibilidad de las propiedades y métodos:</p> <ul> <li><code>public</code>: Accesible en cualquier lugar.</li> <li><code>private</code>: Accesible solo dentro de la clase.</li> <li><code>protected</code>: Accesible solo en la clase y sus subclases.</li> </ul> <pre><code>class Persona { private edad: number = 30; public getEdad() { return this.edad; } }</code></pre>"
                },
                {
                    "topic": "Enum y Tipos Avanzados",
                    "description": "<h3> Enum y Tipos Avanzados</h3> <p>TypeScript introduce el concepto de <strong>Enum</strong> para definir conjuntos de valores constantes.</p> <h4> Declaración de un Enum</h4> <pre><code>enum Estado { Activo, Inactivo, Suspendido } let usuario: Estado = Estado.Activo;</code></pre> <h4> Tipos Avanzados</h4> <p>Además de los tipos básicos, TypeScript incluye:</p> <ul> <li><code>union</code>: Una variable puede tener múltiples tipos.</li> <li><code>tuple</code>: Define arrays con longitud y tipos fijos.</li> <li><code>type</code>: Permite crear alias de tipos.</li> </ul> <pre><code>type ID = string | number; let userId: ID = 123;</code></pre>"
                },
                {
                    "topic": "Módulos y Namespace",
                    "description": "<h3> Módulos y Namespace</h3> <p>TypeScript soporta la modularización del código mediante módulos y namespace.</p> <h4> Creación de un Módulo</h4> <p>Un módulo puede exportar e importar elementos entre diferentes archivos:</p> <pre><code>// modulo.ts export function saluda() { return 'Hola'; } // main.ts import { saluda } from './modulo'; console.log(saluda());</code></pre> <h4> Uso de los Namespace</h4> <p>Los namespace agrupan lógicamente múltiples funciones:</p> <pre><code>namespace Utility { export function log(msg: string) { console.log(msg); } } Utility.log('Mensaje');</code></pre>"
                },
                {
                    "topic": "Compilación y Debugging",
                    "description": "<h3> Compilación y Debugging</h3> <p>TypeScript se compila en JavaScript utilizando el comando <code>tsc</code>.</p> <h4> Instalación de TypeScript</h4> <pre><code>npm install -g typescript</code></pre> <h4> Compilación de un archivo TypeScript</h4> <pre><code>tsc script.ts</code></pre> <h4> Uso del archivo tsconfig.json</h4> <p>El archivo <code>tsconfig.json</code> permite configurar la compilación:</p> <pre><code>{ 'compilerOptions': { 'target': 'ES6', 'module': 'CommonJS' } }</code></pre> <h4> Debugging con Visual Studio Code</h4> <p>VS Code permite ejecutar el debug del código TypeScript directamente en el editor.</p>"
                }
            ],
            "image": "assets/guides/typescript_oneBlade.png"
        },
        {
            "title": "Guía SQL",
            "description": "Aprende SQL, el lenguaje esencial para la gestión de bases de datos relacionales.",
            "topics": [
                {
                    "topic": "Introducción a las bases de datos relacionales",
                    "description": "<h3> Introducción a las Bases de Datos Relacionales</h3> <p>SQL (Structured Query Language) es un lenguaje de programación utilizado para gestionar e interrogar bases de datos relacionales. Las bases de datos relacionales organizan los datos en tablas conectadas entre sí a través de claves primarias y claves externas.</p> <h4> Por qué usar una base de datos relacional?</h4> <ul> <li><strong>Estructura organizada:</strong> Los datos se almacenan en tablas con filas y columnas.</li> <li><strong>Integridad referencial:</strong> Las relaciones entre las tablas garantizan la coherencia de los datos.</li> <li><strong>Eficiencia:</strong> SQL permite recuperar, actualizar y gestionar grandes cantidades de datos de manera rápida.</li> </ul> <h4> Principales Bases de Datos Relacionales</h4> <p>Entre las más utilizadas encontramos: <strong>MySQL</strong>, <strong>PostgreSQL</strong>, <strong>Microsoft SQL Server</strong>, <strong>Oracle</strong> y <strong>SQLite</strong>.</p>"
                },
                {
                    "topic": "Creación y gestión de las tablas",
                    "description": "<h3> Creación y Gestión de las Tablas</h3> <p>Las tablas son el elemento fundamental de una base de datos SQL. Cada tabla está compuesta por columnas (atributos) y filas (registros).</p> <h4> Crear una Tabla</h4> <pre><code>CREATE TABLE usuarios ( id INT PRIMARY KEY, nombre VARCHAR(50), email VARCHAR(100) UNIQUE, edad INT );</code></pre> <h4> Eliminar una Tabla</h4> <pre><code>DROP TABLE usuarios;</code></pre> <h4> Modificar una Tabla</h4> <pre><code>ALTER TABLE usuarios ADD COLUMN telefono VARCHAR(15);</code></pre> <p>El comando <code>ALTER TABLE</code> permite añadir, eliminar o modificar columnas en una tabla existente.</p>"
                },
                {
                    "topic": "Consultas con SELECT",
                    "description": "<h3> Consultas con SELECT</h3> <p>El comando <code>SELECT</code> es el más utilizado en SQL para recuperar datos de una tabla.</p> <h4> Seleccionar Todos los Datos</h4> <pre><code>SELECT * FROM usuarios;</code></pre> <h4> Seleccionar Columnas Específicas</h4> <pre><code>SELECT nombre, email FROM usuarios;</code></pre> <h4> Filtrar los Datos con WHERE</h4> <pre><code>SELECT * FROM usuarios WHERE edad &gt; 18;</code></pre> <h4> Ordenar los Resultados</h4> <pre><code>SELECT * FROM usuarios ORDER BY nombre ASC;</code></pre> <p>La cláusula <code>ORDER BY</code> permite ordenar los resultados en orden ascendente (<code>ASC</code>) o descendente (<code>DESC</code>).</p>"
                },
                {
                    "topic": "JOIN y relaciones entre tablas",
                    "description": "<h3> JOIN y Relaciones entre Tablas</h3> <p>Las relaciones entre tablas se gestionan a través de las claves primarias y las claves externas.</p> <h4> Tipos de JOIN</h4> <ul> <li><strong>INNER JOIN:</strong> Devuelve solo los registros con coincidencia en ambas tablas.</li> <li><strong>LEFT JOIN:</strong> Devuelve todos los registros de la primera tabla y los correspondientes de la segunda.</li> <li><strong>RIGHT JOIN:</strong> Devuelve todos los registros de la segunda tabla y los correspondientes de la primera.</li> <li><strong>FULL OUTER JOIN:</strong> Devuelve todos los registros de ambas tablas.</li> </ul> <h4> Ejemplo de INNER JOIN</h4> <pre><code>SELECT usuarios.nombre, pedidos.id_pedido FROM usuarios INNER JOIN pedidos ON usuarios.id = pedidos.id_usuario;</code></pre> <p>En este ejemplo, se recuperan los nombres de los usuarios y sus pedidos asociados.</p>"
                },
                {
                    "topic": "Operaciones de Inserción, Modificación y Eliminación",
                    "description": "<h3> Operaciones de Inserción, Modificación y Eliminación</h3> <p>SQL permite insertar, actualizar y eliminar datos en una tabla.</p> <h4> Insertar un Nuevo Registro</h4> <pre><code>INSERT INTO usuarios (id, nombre, email, edad) VALUES (1, 'Mario Rossi', 'mario@example.com', 30);</code></pre> <h4> Actualizar un Registro</h4> <pre><code>UPDATE usuarios SET edad = 31 WHERE id = 1;</code></pre> <h4> Eliminar un Registro</h4> <pre><code>DELETE FROM usuarios WHERE id = 1;</code></pre> <p>Es importante usar la cláusula <code>WHERE</code> en las operaciones <code>UPDATE</code> y <code>DELETE</code> para evitar modificar o eliminar todos los registros de la tabla.</p>"
                },
                {
                    "topic": "Stored Procedures y Funciones",
                    "description": "<h3> Stored Procedures y Funciones</h3> <p>Las Stored Procedures y las Funciones permiten automatizar operaciones repetitivas dentro de la base de datos.</p> <h4> Crear una Stored Procedure</h4> <pre><code>DELIMITER // CREATE PROCEDURE GetUsuarios() BEGIN SELECT * FROM usuarios; END // DELIMITER ;</code></pre> <h4> Ejecutar una Stored Procedure</h4> <pre><code>CALL GetUsuarios();</code></pre> <h4> Crear una Función</h4> <pre><code>DELIMITER // CREATE FUNCTION CuentaUsuarios() RETURNS INT DETERMINISTIC BEGIN DECLARE total INT; SELECT COUNT(*) INTO total FROM usuarios; RETURN total; END // DELIMITER ;</code></pre> <h4> Usar una Función</h4> <pre><code>SELECT CuentaUsuarios();</code></pre> <p>Las funciones devuelven un valor y pueden ser utilizadas en las consultas SQL.</p>"
                }
            ],
            "image": "assets/guides/sql_oneBlade.png"
        }
    ]
}