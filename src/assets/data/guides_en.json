{
    "guides": [
        {
            "title": "Bootstrap Guide",
            "description": "A detailed guide on Bootstrap, the most used CSS framework for creating responsive and modern websites.",
            "topics": [
                {
                    "topic": "Introduction to Bootstrap",
                    "description": "<strong>Bootstrap</strong> is an <em>open-source</em> framework created by Twitter with the goal of simplifying the development of <strong>responsive</strong> user interfaces accessible to all devices. <h3>Why use Bootstrap?</h3> <ul> <li><strong>Ease of use:</strong> It includes ready-to-use CSS classes that simplify the creation of layouts and graphic components.</li> <li><strong>Responsive Design:</strong> It automatically adapts layouts to different devices, ensuring an optimal user experience on mobile, tablet, and desktop.</li> <li><strong>Cross-browser Compatibility:</strong> It supports all modern browsers.</li> <li><strong>Predefined Components:</strong> It includes elements like navbar, modals, forms, cards, and many more.</li> <li><strong>JavaScript Support:</strong> It offers advanced functionalities without the need for external libraries.</li> </ul> <h3>How Does Bootstrap Work?</h3> <p>Bootstrap is based on a modular system that includes a flexible grid for dynamic layouts and a series of CSS and JavaScript components for interactive elements.</p> <h3>Conclusion</h3> <p>Bootstrap is an <strong>essential</strong> tool for any developer who wants to create modern, performant, and <em>responsive</em> websites without having to write complex CSS code.</p>"
                },
                {
                    "topic": "Basic Structure of Bootstrap",
                    "description": "<h3> Introduction to the Structure of Bootstrap</h3> <p>Bootstrap is based on a <strong>modular structure</strong> and a <strong>flexible grid system</strong> that allows developers to create responsive layouts easily and quickly. Thanks to a combination of <em>HTML, CSS, and JavaScript</em>, Bootstrap provides a series of predefined classes that facilitate the organization of content on any type of screen, from <strong>mobile</strong> to <strong>desktop</strong>.</p> <h3> The Bootstrap Grid: The Heart of the Layout</h3> <p>Bootstrap uses a grid system based on <strong>12 columns</strong>, which allows organizing elements dynamically. The system is highly flexible and allows combining columns to obtain complex and fully responsive layouts.</p> <h4> Basic Grid Structure</h4> <p>To create a grid in Bootstrap, use the <code>.container</code> class, within which rows (<code>.row</code>) and columns (<code>.col</code>) are defined:</p> <pre><code>&lt;div class='container'&gt; &lt;div class='row'&gt; &lt;div class='col-md-6 bg-primary text-white'&gt;Column 1&lt;/div&gt; &lt;div class='col-md-6 bg-secondary text-white'&gt;Column 2&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p> The code above creates a row with <strong>two equal columns</strong>, each occupying half of the screen on medium-sized devices (<code>.col-md-6</code>).</p> <h3> Containers: Fixed and Fluid</h3> <p>Bootstrap offers two types of containers to control the layout width:</p> <ul> <li><strong><code>.container</code></strong>: It has a fixed width and automatically adapts to different screen sizes.</li> <li><strong><code>.container-fluid</code></strong>: It always occupies <strong>100% of the available width</strong>.</li> </ul> <h4> Usage Example:</h4> <pre><code>&lt;div class='container-fluid bg-dark text-white p-3'&gt; This container extends across the entire width of the screen. &lt;/div&gt;</code></pre> <h3> Responsive Layout Classes</h3> <p>Bootstrap uses breakpoint classes to adapt the layout to different resolutions:</p> <table border='1'> <tr> <th>Class</th> <th>Breakpoint</th> </tr> <tr> <td><code>.col-</code></td> <td>&gt;= 0px (All devices)</td> </tr> <tr> <td><code>.col-sm-</code></td> <td>&gt;= 576px (Smartphones)</td> </tr> <tr> <td><code>.col-md-</code></td> <td>&gt;= 768px (Tablets)</td> </tr> <tr> <td><code>.col-lg-</code></td> <td>&gt;= 992px (Laptops)</td> </tr> <tr> <td><code>.col-xl-</code></td> <td>&gt;= 1200px (Large screens)</td> </tr> </table> <p>These classes allow creating columns that automatically resize based on the screen size.</p> <h3> Customization with Spacing and Margins</h3> <p>Bootstrap offers a system of <strong>predefined spacings</strong> through classes like <code>.p-*</code> for padding and <code>.m-*</code> for margins:</p> <ul> <li><code>.p-3</code>: Adds uniform internal padding.</li> <li><code>.m-2</code>: Adds medium-sized external margins.</li> </ul> <h4> Example:</h4> <pre><code>&lt;div class='bg-info text-white p-3 m-2'&gt; This div has customized padding and margins. &lt;/div&gt;</code></pre> <h3> Conclusion</h3> <p>The basic structure of Bootstrap allows building <strong>flexible and responsive layouts</strong> without having to write complex CSS code. Thanks to the grid system, containers, and customization classes, Bootstrap is the ideal choice for developers and designers who want to create modern pages simply and efficiently.</p>"
                },
                {
                    "topic": "Main Components",
                    "description": "<h3> Introduction to Bootstrap Components</h3> <p>One of Bootstrap's strengths is its vast collection of <strong>predefined components</strong> that allow quickly adding interactive and stylistically consistent elements to a website without having to write custom CSS code. Bootstrap components include <strong>buttons, navbar, modals, cards, forms, tooltips</strong>, and much more, all optimized for a smooth user experience on any device.</p> <h3> Buttons and Action Buttons</h3> <p>Buttons in Bootstrap are highly customizable and are created with the <code>.btn</code> class. There are different variants based on colors and sizes.</p> <h4> Button Example</h4> <pre><code>&lt;button class='btn btn-primary'&gt;Primary Button&lt;/button&gt; &lt;button class='btn btn-secondary'&gt;Secondary Button&lt;/button&gt; &lt;button class='btn btn-success'&gt;Success Button&lt;/button&gt;</code></pre> <p>These buttons have standardized colors and can be combined with classes like <code>.btn-lg</code> and <code>.btn-sm</code> to adjust their size.</p> <h3> Navbar: Navigation Bars</h3> <p>The navbar is one of the most used elements to structure the navigation of a website. Bootstrap offers a flexible and easily customizable solution.</p> <h4> Navbar Example</h4> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-toggle='collapse' data-target='#menu'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='menu'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Services&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <p>This navbar is <strong>responsive</strong>: on mobile devices, the menu compacts and can be expanded with a button.</p> <h3> Cards: Styled Containers</h3> <p>Cards are versatile containers that allow displaying information in a structured way.</p> <h4> Card Example</h4> <pre><code>&lt;div class='card' style='width: 18rem;'&gt; &lt;img src='image.jpg' class='card-img-top' alt='...'&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Card Title&lt;/h5&gt; &lt;p class='card-text'&gt;Example text for the card.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Learn More&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Cards can include images, text, and buttons, making them perfect for content or product previews.</p> <h3> Modals: Interactive Dialog Windows</h3> <p>Another powerful component of Bootstrap is modals, windows that open above the page content to display messages or forms.</p> <h4> Modal Example</h4> <pre><code>&lt;button type='button' class='btn btn-primary' data-toggle='modal' data-target='#exampleModal'&gt; Open Modal &lt;/button&gt; &lt;div class='modal fade' id='exampleModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Modal Title&lt;/h5&gt; &lt;button type='button' class='close' data-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Modal Content. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-dismiss='modal'&gt;Close&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <p>Modals are useful for displaying information without changing the page, improving usability.</p> <h3> Tooltip and Popover</h3> <p>To enhance user interaction, Bootstrap includes tooltips (hover hints) and popovers (clickable info windows).</p> <h4> Tooltip Example</h4> <pre><code>&lt;button type='button' class='btn btn-secondary' data-toggle='tooltip' title='Extra information'&gt; Hover over &lt;/button&gt;</code></pre> <p>Tooltips improve accessibility and user experience by providing additional information.</p> <h3> Conclusion</h3> <p>Bootstrap components simplify the creation of <strong>modern, interactive, and accessible</strong> user interfaces with just a few simple commands. Thanks to buttons, navbar, modals, and tooltips, developers can build <strong>functional and intuitive web applications</strong> in no time.</p>"
                },
                {
                    "topic": "Customizing Bootstrap",
                    "description": "<h3> Customizing Bootstrap</h3> <p>One of Bootstrap's strengths is its ability to be <strong>highly customizable</strong>, allowing developers to adapt the framework to their own needs without losing the advantages of predefined classes. There are several ways to customize Bootstrap, including <strong>CSS class overrides</strong>, <strong>using SCSS variables</strong>, and <strong>Bootstrap Themes</strong>.</p> <h3> CSS Style Overrides</h3> <p>The simplest method to customize Bootstrap is to override the CSS classes directly in your stylesheet. For example, if you want to change the color of all primary buttons, simply write:</p> <pre><code>.btn-primary { background-color: #ff5733; border-color: #ff5733; }</code></pre> <p>This approach is quick, but it may not be scalable for larger projects, where a more structured use of the framework would be preferable.</p> <h3> Using SCSS Variables</h3> <p>Bootstrap is built with <strong>Sass (SCSS)</strong>, which allows for more advanced and organized framework customization. It is possible to modify Bootstrap's <strong>default variables</strong> to adapt the graphical interface to your own style.</p> <h4> Example of Customization with SCSS</h4> <pre><code>$primary: #ff5733; $secondary: #28a745; @import 'bootstrap/scss/bootstrap';</code></pre> <p>This technique allows changing Bootstrap's main colors without having to manually override each CSS class.</p> <h3> Creating Custom Classes</h3> <p>If you want to maintain Bootstrap's functionalities but add a personalized touch, you can create custom CSS classes based on existing ones:</p> <pre><code>.btn-custom { background-color: #ff5733; color: white; border-radius: 50px; padding: 10px 20px; }</code></pre> <p>This allows for easily reusing custom styles in multiple parts of the project.</p> <h3> Bootstrap Themes and Templates</h3> <p>Another method to customize Bootstrap is to use <strong>Bootstrap Themes</strong>, which are pre-packaged templates with advanced styles that maintain compatibility with the framework. You can download themes from sites like <a href='https://themes.getbootstrap.com/' target='_blank'>Bootstrap Themes</a> or create your own by modifying the source code.</p> <h3> Conclusion</h3> <p>Bootstrap offers multiple customization methods that allow creating <strong>unique interfaces</strong> without having to write all the CSS code from scratch. With the use of SCSS variables, class overrides, and custom themes, developers can achieve a completely tailored look while maintaining the framework's power and flexibility.</p>"
                },
                {
                    "topic": "Bootstrap Tutorial: Creating a Website",
                    "description": "<h3> Creating a Website with Bootstrap</h3> <p>Bootstrap is one of the most used frameworks for creating modern and responsive websites. In this tutorial, we will create a complete site using Bootstrap's main functionalities, including <strong>grids, navbar, cards, forms, and modals</strong>. Follow step by step, and you'll have a site ready in a few minutes!</p> <h3> 1. Basic Project Structure</h3> <p>To start, let's create the project structure. We will have an <code>index.html</code> file and a <code>css</code> folder for any custom styles.</p> <pre><code> /bootstrap-project/ ├── index.html ├── css/ │   ├── styles.css </code></pre> <p>Now, in the <code>index.html</code> file, let's include Bootstrap via CDN:</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title>My Bootstrap Site&lt;/title&gt; &lt;link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css'&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <h3> 2. Creating a Navbar</h3> <p>The navigation bar is essential for site navigation. Let's add a Bootstrap navbar with a basic menu.</p> <pre><code>&lt;nav class='navbar navbar-expand-lg navbar-light bg-light'&gt; &lt;div class='container'&gt; &lt;a class='navbar-brand' href='#'&gt;Logo&lt;/a&gt; &lt;button class='navbar-toggler' type='button' data-bs-toggle='collapse' data-bs-target='#navbarNav'&gt; &lt;span class='navbar-toggler-icon'&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class='collapse navbar-collapse' id='navbarNav'&gt; &lt;ul class='navbar-nav'&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Services&lt;/a&gt;&lt;/li&gt; &lt;li class='nav-item'&gt;&lt;a class='nav-link' href='#'&gt;Contacts&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;</code></pre> <h3> 3. Creating a Hero Section</h3> <p>Let's add an initial section with a background image and a welcome text.</p> <pre><code>&lt;header class='bg-primary text-white text-center py-5'&gt; &lt;div class='container'&gt; &lt;h1>Welcome to My Site&lt;/h1&gt; &lt;p>A site created with Bootstrap 5&lt;/p&gt; &lt;a href='#' class='btn btn-light'&gt;Learn More&lt;/a&gt; &lt;/div&gt; &lt;/header&gt;</code></pre> <h3> 4. Adding a Grid with Cards</h3> <p>Cards are useful for displaying content in an orderly and responsive way.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;div class='row'&gt; &lt;div class='col-md-4'&gt; &lt;div class='card'&gt; &lt;img src='https://via.placeholder.com/300' class='card-img-top' alt='...'/&gt; &lt;div class='card-body'&gt; &lt;h5 class='card-title'&gt;Card Title&lt;/h5&gt; &lt;p class='card-text'&gt;Example text for the card.&lt;/p&gt; &lt;a href='#' class='btn btn-primary'&gt;Learn More&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3> 5. Creating a Contact Form</h3> <p>Let's add a contact form to receive messages from users.</p> <pre><code>&lt;div class='container mt-5'&gt; &lt;h2>Contact Us&lt;/h2&gt; &lt;form&gt; &lt;div class='mb-3'&gt; &lt;label for='email' class='form-label'&gt;Email&lt;/label&gt; &lt;input type='email' class='form-control' id='email' placeholder='Enter your email'/&gt; &lt;/div&gt; &lt;div class='mb-3'&gt; &lt;label for='message' class='form-label'&gt;Message&lt;/label&gt; &lt;textarea class='form-control' id='message' rows='3' placeholder='Write your message'&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;button type='submit' class='btn btn-primary'&gt;Send&lt;/button&gt; &lt;/form&gt; &lt;/div&gt;</code></pre> <h3> 6. Creating a Modal</h3> <p>Modals are used to display extra content without changing the page.</p> <pre><code>&lt;button type='button' class='btn btn-warning' data-bs-toggle='modal' data-bs-target='#infoModal'&gt; Open Modal &lt;/button&gt; &lt;div class='modal fade' id='infoModal' tabindex='-1' role='dialog'&gt; &lt;div class='modal-dialog'&gt; &lt;div class='modal-content'&gt; &lt;div class='modal-header'&gt; &lt;h5 class='modal-title'&gt;Information&lt;/h5&gt; &lt;button type='button' class='close' data-bs-dismiss='modal'&gt;&times;&lt;/button&gt; &lt;/div&gt; &lt;div class='modal-body'&gt; Modal content. &lt;/div&gt; &lt;div class='modal-footer'&gt; &lt;button type='button' class='btn btn-secondary' data-bs-dismiss='modal'&gt;Close&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</code></pre> <h3> Conclusion</h3> <p>We have seen how to build a complete website with Bootstrap in a few steps. With a <strong>navbar, a hero section, cards, a contact form, and modals</strong>, we can create a professional and modern page in no time.</p>"
                }
            ],
            "image": "assets/guides/bootstrap_oneBlade.png"
        },
        {
            "title": "Git Guide",
            "description": "Learn how to use Git, the most popular version control system among developers, to manage your projects.",
            "topics": [
                {
                    "topic": "What is Git and why use it",
                    "description": "<h3> What is Git?</h3> <p><strong>Git</strong> is a <em>distributed version control system</em> created by Linus Torvalds in 2005. It is designed to manage code development efficiently, allowing multiple developers to work simultaneously without conflicts.</p> <h3> Why use Git?</h3> <ul> <li><strong>Change history:</strong> Every change to the code is tracked, allowing you to restore previous versions if necessary.</li> <li><strong>Collaboration:</strong> Multiple developers can work on the same project simultaneously without overwriting each other's work.</li> <li><strong>Speed and reliability:</strong> Being a distributed system, every copy of a repository contains the entire history, improving data security.</li> <li><strong>Branching and merging:</strong> It allows creating separate development branches to test new features and merge them later.</li> </ul>"
                },
                {
                    "topic": "Installation and configuration",
                    "description": "<h3> Installing Git</h3> <p>Git is available for Windows, macOS, and Linux. To install it, follow these steps:</p> <ul> <li><strong>Windows:</strong> Download the installer from the official site <a href='https://git-scm.com/downloads' target='_blank'>git-scm.com</a> and follow the guided instructions.</li> <li><strong>macOS:</strong> You can install it with Homebrew by running <code>brew install git</code>.</li> <li><strong>Linux:</strong> Use the command <code>sudo apt install git</code> on Debian/Ubuntu or <code>sudo dnf install git</code> on Fedora.</li> </ul> <h3> Configuring Git</h3> <p>After installation, you need to configure your username and email to track changes:</p> <pre><code>git config --global user.name 'YourName' git config --global user.email 'youremail@example.com'</code></pre> <p>You can verify the configuration by running:</p> <pre><code>git config --list</code></pre>"
                },
                {
                    "topic": "Repository management",
                    "description": "<h3> Creating and managing a repository</h3> <p>A Git repository is a folder that contains the project files and their version history.</p> <h4> Creating a new repository</h4> <p>To initialize an existing repository, use the command:</p> <pre><code>git init</code></pre> <p>If you want to clone a remote repository, use:</p> <pre><code>git clone https://github.com/user/repository.git</code></pre> <h4> Adding files to the repository</h4> <p>After creating or modifying files, you can add them to the staging area:</p> <pre><code>git add filename</code></pre> <p>To confirm the changes, run a commit:</p> <pre><code>git commit -m 'Commit message'</code></pre>"
                },
                {
                    "topic": "Branching and merging",
                    "description": "<h3> Managing Branches in Git</h3> <p>A <strong>branch</strong> is a separate line of development. Using branches allows working on new features without interfering with the main code.</p> <h4> Creating and switching to a new branch</h4> <pre><code>git branch new-branch git checkout new-branch</code></pre> <p>Or, in a single command:</p> <pre><code>git checkout -b new-branch</code></pre> <h4> Merging a branch into the main code</h4> <p>Once a change is complete, we can merge it into the main branch:</p> <pre><code>git checkout main git merge new-branch</code></pre> <h4> Deleting a branch</h4> <pre><code>git branch -d branch-name</code></pre>"
                },
                {
                    "topic": "Collaborating with GitHub",
                    "description": "<h3> Working with GitHub</h3> <p><strong>GitHub</strong> is a hosting platform for Git repositories that allows collaboration among developers.</p> <h4> Connecting a local repository to GitHub</h4> <pre><code>git remote add origin https://github.com/youraccount/repository.git</code></pre> <h4> Pushing changes to GitHub</h4> <p>To push the code online, use:</p> <pre><code>git push -u origin main</code></pre> <h4> Pulling changes from GitHub</h4> <p>If another developer has updated the repository, you can pull the changes with:</p> <pre><code>git pull origin main</code></pre> <h4> Creating a Pull Request</h4> <p>A pull request allows proposing changes before merging them into the main code.</p> <ol> <li>Commit the changes.</li> <li>Push the changes with <code>git push</code>.</li> <li>On GitHub, open the repository and click on <em>New Pull Request</em>.</li> <li>Describe the changes and submit the request.</li> </ol>"
                }
            ],
            "image": "assets/guides/git_oneBlade.png"
        },
        {
            "title": "HTML and CSS Guide",
            "description": "A complete guide to learning the basics of HTML and CSS, the fundamental building blocks of web design.",
            "topics": [
                {
                    "topic": "Structure of an HTML page",
                    "description": "<h3> Structure of an HTML Page</h3> <p>An HTML file consists of a well-defined structure that organizes the contents of a web page. Every HTML document starts with a <code>DOCTYPE</code> declaration to indicate the version of HTML in use to the browser.</p> <h4> Basic Structure</h4> <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;meta charset='UTF-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;Page Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to the World of HTML&lt;/h1&gt; &lt;p&gt;This is a sample paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p>Every HTML page is divided into two main sections: the <strong>head</strong>, which contains metadata and links to stylesheets and scripts, and the <strong>body</strong>, which contains the visible content of the page.</p>"
                },
                {
                    "topic": "Fundamental tags and attributes",
                    "description": "<h3> Fundamental Tags and Attributes</h3> <p>HTML uses <strong>tags</strong> to structure the content of the page. Each tag has a specific purpose and can contain <strong>attributes</strong> to define its behavior or appearance.</p> <h4> Most Common Tags</h4> <ul> <li><code>&lt;h1&gt;...&lt;/h1&gt;</code>: Headings from <code>h1</code> to <code>h6</code> for titles of different sizes.</li> <li><code>&lt;p&gt;...&lt;/p&gt;</code>: Paragraphs of text.</li> <li><code>&lt;a href='URL'&gt;Link&lt;/a&gt;</code>: Hyperlinks.</li> <li><code>&lt;img src='image.jpg' alt='Description'&gt;</code>: Insert images.</li> <li><code>&lt;div&gt;...&lt;/div&gt;</code>: Containers for more complex layouts and structures.</li> </ul> <h4> Important Attributes</h4> <ul> <li><code>id</code>: Unique identifier for an element.</li> <li><code>class</code>: Defines a CSS class for styling.</li> <li><code>alt</code>: Alternative text for images.</li> <li><code>href</code>: Destination address for links.</li> </ul>"
                },
                {
                    "topic": "CSS: selectors and properties",
                    "description": "<h3> CSS Selectors and Properties</h3> <p>CSS (Cascading Style Sheets) is the language used to define the style of HTML elements.</p> <h4> CSS Selectors</h4> <p>Selectors are used to target the elements on which to apply styles:</p> <ul> <li><code>element { property: value; }</code> → Selects all elements of that type.</li> <li><code>.class { property: value; }</code> → Selects all elements with that class.</li> <li><code>#id { property: value; }</code> → Selects an element with a specific id.</li> </ul> <h4> Fundamental CSS Properties</h4> <p>Some examples of CSS properties:</p> <ul> <li><code>color</code>: Defines the text color.</li> <li><code>background-color</code>: Sets the background color.</li> <li><code>font-size</code>: Specifies the text size.</li> <li><code>margin</code>: Manages the external space of an element.</li> <li><code>padding</code>: Defines the internal space of an element.</li> </ul>"
                },
                {
                    "topic": "Box model and responsive layout",
                    "description": "<h3> Box Model and Responsive Layout</h3> <p>The <strong>Box Model</strong> defines how HTML elements occupy space on the page.</p> <h4> Box Model Structure</h4> <ul> <li><strong>Content</strong>: The actual content of the element.</li> <li><strong>Padding</strong>: The internal space between the content and the border.</li> <li><strong>Border</strong>: The outline of the element.</li> <li><strong>Margin</strong>: The external space that separates an element from others.</li> </ul> <p>To set margins and padding:</p> <pre><code>div { margin: 20px; padding: 10px; }</code></pre> <h4> Responsive Layout with Flexbox</h4> <p>Flexbox allows creating flexible and adaptable layouts.</p> <pre><code>.container { display: flex; justify-content: space-between; }</code></pre> <h4> CSS Grid</h4> <p>Another powerful technique for advanced layouts:</p> <pre><code>.grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }</code></pre>"
                },
                {
                    "topic": "Animations and transitions with CSS",
                    "description": "<h3> Animations and Transitions with CSS</h3> <p>CSS allows adding animation effects to elements without using JavaScript.</p> <h4> CSS Transitions</h4> <p>A transition allows gradually changing a CSS property:</p> <pre><code>button { background-color: blue; transition: background-color 0.3s ease-in-out; } button:hover { background-color: red; }</code></pre> <h4> Animations with Keyframes</h4> <p>With <code>@keyframes</code>, it is possible to create complex animations:</p> <pre><code>@keyframes move { from { transform: translateX(0); } to { transform: translateX(100px); } } div { animation: move 2s infinite alternate; }</code></pre>"
                }
            ],
            "image": "assets/guides/html_css_oneBlade.png"
        },
        {
            "title": "TypeScript Guide",
            "description": "An introduction to TypeScript, the superset of JavaScript that improves type management and code control.",
            "topics": [
                {
                    "topic": "Why use TypeScript",
                    "description": "<h3> Why use TypeScript?</h3> <p><strong>TypeScript</strong> is a superset of JavaScript developed by Microsoft that adds support for <strong>static types</strong>, improving the <em>readability</em>, <em>maintainability</em>, and <em>security</em> of the code. Here are some key advantages:</p> <ul> <li><strong>Error prevention:</strong> Thanks to static types, TypeScript helps avoid common errors in the code.</li> <li><strong>Autocomplete and IntelliSense:</strong> It provides intelligent suggestions and real-time documentation.</li> <li><strong>Safe refactoring:</strong> It improves the ability to modify the code without introducing bugs.</li> <li><strong>Compatibility with JavaScript:</strong> It can be used on any existing JavaScript code.</li> <li><strong>Advanced ES6+ support:</strong> It includes modern features like async/await, destructuring, and ES6 modules.</li> </ul>"
                },
                {
                    "topic": "Types and Interfaces",
                    "description": "<h3> Types and Interfaces</h3> <p>TypeScript introduces <strong>static types</strong>, allowing you to explicitly declare the type of variables and functions.</p> <h4> Basic Types</h4> <p>TypeScript supports primitive types like <code>string</code>, <code>number</code>, <code>boolean</code>, <code>any</code>, <code>null</code>, and <code>undefined</code>.</p> <pre><code>let name: string = 'Alice'; let age: number = 30; let isOnline: boolean = true;</code></pre> <h4> Interfaces</h4> <p>Interfaces allow defining the structure of an object:</p> <pre><code>interface Person { name: string; age: number; } let user: Person = { name: 'Alice', age: 30 };</code></pre> <p>Interfaces help write more <strong>readable</strong> and <strong>scalable</strong> code.</p>"
                },
                {
                    "topic": "Classes and Access Modifiers",
                    "description": "<h3> Classes and Access Modifiers</h3> <p>TypeScript supports object-oriented programming with classes and access modifiers like <code>public</code>, <code>private</code>, and <code>protected</code>.</p> <h4> Declaring a Class</h4> <pre><code>class Person { name: string; constructor(name: string) { this.name = name; } greet() { return `Hi, I'm ${this.name}`; } } let p = new Person('Alice'); console.log(p.greet());</code></pre> <h4> Access Modifiers</h4> <p>They allow controlling the visibility of properties and methods:</p> <ul> <li><code>public</code>: Accessible everywhere.</li> <li><code>private</code>: Accessible only within the class.</li> <li><code>protected</code>: Accessible only to the class and its subclasses.</li> </ul> <pre><code>class Person { private age: number = 30; public getAge() { return this.age; } }</code></pre>"
                },
                {
                    "topic": "Enums and Advanced Types",
                    "description": "<h3> Enums and Advanced Types</h3> <p>TypeScript introduces the concept of <strong>Enums</strong> to define sets of constant values.</p> <h4> Declaring an Enum</h4> <pre><code>enum Status { Active, Inactive, Suspended } let user: Status = Status.Active;</code></pre> <h4> Advanced Types</h4> <p>In addition to basic types, TypeScript includes:</p> <ul> <li><code>union</code>: A variable can have multiple types.</li> <li><code>tuple</code>: Defines arrays with fixed length and types.</li> <li><code>type</code>: Allows creating type aliases.</li> </ul> <pre><code>type ID = string | number; let userId: ID = 123;</code></pre>"
                },
                {
                    "topic": "Modules and Namespaces",
                    "description": "<h3> Modules and Namespaces</h3> <p>TypeScript supports code modularization through modules and namespaces.</p> <h4> Creating a Module</h4> <p>A module can export and import elements between different files:</p> <pre><code>// module.ts export function greet() { return 'Hi'; } // main.ts import { greet } from './module'; console.log(greet());</code></pre> <h4> Using Namespaces</h4> <p>Namespaces logically group multiple functions:</p> <pre><code>namespace Utility { export function log(msg: string) { console.log(msg); } } Utility.log('Message');</code></pre>"
                },
                {
                    "topic": "Compilation and Debugging",
                    "description": "<h3> Compilation and Debugging</h3> <p>TypeScript is compiled into JavaScript using the <code>tsc</code> command.</p> <h4> Installing TypeScript</h4> <pre><code>npm install -g typescript</code></pre> <h4> Compiling a TypeScript file</h4> <pre><code>tsc script.ts</code></pre> <h4> Using the tsconfig.json file</h4> <p>The <code>tsconfig.json</code> file allows configuring the compilation:</p> <pre><code>{ 'compilerOptions': { 'target': 'ES6', 'module': 'CommonJS' } }</code></pre> <h4> Debugging with Visual Studio Code</h4> <p>VS Code allows debugging TypeScript code directly in the editor.</p>"
                }
            ],
            "image": "assets/guides/typescript_oneBlade.png"
        },
        {
            "title": "SQL Guide",
            "description": "Learn SQL, the essential language for managing relational databases.",
            "topics": [
                {
                    "topic": "Introduction to relational databases",
                    "description": "<h3> Introduction to Relational Databases</h3> <p>SQL (Structured Query Language) is a programming language used to manage and query relational databases. Relational databases organize data into tables linked together through primary keys and foreign keys.</p> <h4> Why use a relational database?</h4> <ul> <li><strong>Organized structure:</strong> Data is stored in tables with rows and columns.</li> <li><strong>Referential integrity:</strong> Relationships between tables ensure data consistency.</li> <li><strong>Efficiency:</strong> SQL allows retrieving, updating, and managing large amounts of data quickly.</li> </ul> <h4> Main Relational Databases</h4> <p>Among the most used are: <strong>MySQL</strong>, <strong>PostgreSQL</strong>, <strong>Microsoft SQL Server</strong>, <strong>Oracle</strong>, and <strong>SQLite</strong>.</p>"
                },
                {
                    "topic": "Creating and managing tables",
                    "description": "<h3> Creating and Managing Tables</h3> <p>Tables are the fundamental element of an SQL database. Each table consists of columns (attributes) and rows (records).</p> <h4> Creating a Table</h4> <pre><code>CREATE TABLE users ( id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(100) UNIQUE, age INT );</code></pre> <h4> Dropping a Table</h4> <pre><code>DROP TABLE users;</code></pre> <h4> Modifying a Table</h4> <pre><code>ALTER TABLE users ADD COLUMN phone VARCHAR(15);</code></pre> <p>The <code>ALTER TABLE</code> command allows adding, removing, or modifying columns in an existing table.</p>"
                },
                {
                    "topic": "Queries with SELECT",
                    "description": "<h3> Queries with SELECT</h3> <p>The <code>SELECT</code> command is the most used in SQL to retrieve data from a table.</p> <h4> Selecting All Data</h4> <pre><code>SELECT * FROM users;</code></pre> <h4> Selecting Specific Columns</h4> <pre><code>SELECT name, email FROM users;</code></pre> <h4> Filtering Data with WHERE</h4> <pre><code>SELECT * FROM users WHERE age &gt; 18;</code></pre> <h4> Sorting Results</h4> <pre><code>SELECT * FROM users ORDER BY name ASC;</code></pre> <p>The <code>ORDER BY</code> clause allows sorting the results in ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.</p>"
                },
                {
                    "topic": "JOIN and relationships between tables",
                    "description": "<h3> JOIN and Relationships between Tables</h3> <p>Relationships between tables are managed through primary keys and foreign keys.</p> <h4> Types of JOIN</h4> <ul> <li><strong>INNER JOIN:</strong> Returns only the records with matches in both tables.</li> <li><strong>LEFT JOIN:</strong> Returns all records from the first table and the corresponding ones from the second.</li> <li><strong>RIGHT JOIN:</strong> Returns all records from the second table and the corresponding ones from the first.</li> <li><strong>FULL OUTER JOIN:</strong> Returns all records from both tables.</li> </ul> <h4> Example of INNER JOIN</h4> <pre><code>SELECT users.name, orders.order_id FROM users INNER JOIN orders ON users.id = orders.user_id;</code></pre> <p>In this example, we retrieve the names of users and their associated orders.</p>"
                },
                {
                    "topic": "Insert, Update, and Delete operations",
                    "description": "<h3> Insert, Update, and Delete Operations</h3> <p>SQL allows inserting, updating, and deleting data in a table.</p> <h4> Inserting a New Record</h4> <pre><code>INSERT INTO users (id, name, email, age) VALUES (1, 'Mario Rossi', 'mario@example.com', 30);</code></pre> <h4> Updating a Record</h4> <pre><code>UPDATE users SET age = 31 WHERE id = 1;</code></pre> <h4> Deleting a Record</h4> <pre><code>DELETE FROM users WHERE id = 1;</code></pre> <p>It is important to use the <code>WHERE</code> clause in <code>UPDATE</code> and <code>DELETE</code> operations to avoid modifying or deleting all records in the table.</p>"
                },
                {
                    "topic": "Stored Procedures and Functions",
                    "description": "<h3> Stored Procedures and Functions</h3> <p>Stored Procedures and Functions allow automating repetitive operations within the database.</p> <h4> Creating a Stored Procedure</h4> <pre><code>DELIMITER // CREATE PROCEDURE GetUsers() BEGIN SELECT * FROM users; END // DELIMITER ;</code></pre> <h4> Executing a Stored Procedure</h4> <pre><code>CALL GetUsers();</code></pre> <h4> Creating a Function</h4> <pre><code>DELIMITER // CREATE FUNCTION CountUsers() RETURNS INT DETERMINISTIC BEGIN DECLARE total INT; SELECT COUNT(*) INTO total FROM users; RETURN total; END // DELIMITER ;</code></pre> <h4> Using a Function</h4> <pre><code>SELECT CountUsers();</code></pre> <p>Functions return a value and can be used in SQL queries.</p>"
                }
            ],
            "image": "assets/guides/sql_oneBlade.png"
        }
    ]
}